// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.willguibr
{
    public static class GetZPAApplicationSegment
    {
        public static Task<GetZPAApplicationSegmentResult> InvokeAsync(GetZPAApplicationSegmentArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetZPAApplicationSegmentResult>("zpa:index/getZPAApplicationSegment:getZPAApplicationSegment", args ?? new GetZPAApplicationSegmentArgs(), options.WithDefaults());

        public static Output<GetZPAApplicationSegmentResult> Invoke(GetZPAApplicationSegmentInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetZPAApplicationSegmentResult>("zpa:index/getZPAApplicationSegment:getZPAApplicationSegment", args ?? new GetZPAApplicationSegmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZPAApplicationSegmentArgs : Pulumi.InvokeArgs
    {
        [Input("id")]
        public string? Id { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("tcpPortRanges")]
        private List<Inputs.GetZPAApplicationSegmentTcpPortRangeArgs>? _tcpPortRanges;
        public List<Inputs.GetZPAApplicationSegmentTcpPortRangeArgs> TcpPortRanges
        {
            get => _tcpPortRanges ?? (_tcpPortRanges = new List<Inputs.GetZPAApplicationSegmentTcpPortRangeArgs>());
            set => _tcpPortRanges = value;
        }

        [Input("udpPortRanges")]
        private List<Inputs.GetZPAApplicationSegmentUdpPortRangeArgs>? _udpPortRanges;
        public List<Inputs.GetZPAApplicationSegmentUdpPortRangeArgs> UdpPortRanges
        {
            get => _udpPortRanges ?? (_udpPortRanges = new List<Inputs.GetZPAApplicationSegmentUdpPortRangeArgs>());
            set => _udpPortRanges = value;
        }

        public GetZPAApplicationSegmentArgs()
        {
        }
    }

    public sealed class GetZPAApplicationSegmentInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tcpPortRanges")]
        private InputList<Inputs.GetZPAApplicationSegmentTcpPortRangeInputArgs>? _tcpPortRanges;
        public InputList<Inputs.GetZPAApplicationSegmentTcpPortRangeInputArgs> TcpPortRanges
        {
            get => _tcpPortRanges ?? (_tcpPortRanges = new InputList<Inputs.GetZPAApplicationSegmentTcpPortRangeInputArgs>());
            set => _tcpPortRanges = value;
        }

        [Input("udpPortRanges")]
        private InputList<Inputs.GetZPAApplicationSegmentUdpPortRangeInputArgs>? _udpPortRanges;
        public InputList<Inputs.GetZPAApplicationSegmentUdpPortRangeInputArgs> UdpPortRanges
        {
            get => _udpPortRanges ?? (_udpPortRanges = new InputList<Inputs.GetZPAApplicationSegmentUdpPortRangeInputArgs>());
            set => _udpPortRanges = value;
        }

        public GetZPAApplicationSegmentInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetZPAApplicationSegmentResult
    {
        public readonly string BypassType;
        public readonly string ConfigSpace;
        public readonly string CreationTime;
        public readonly string DefaultIdleTimeout;
        public readonly string DefaultMaxAge;
        public readonly string Description;
        public readonly ImmutableArray<string> DomainNames;
        public readonly bool DoubleEncrypt;
        public readonly bool Enabled;
        public readonly string HealthChecktype;
        public readonly string HealthReporting;
        public readonly string? Id;
        public readonly bool IpAnchored;
        public readonly bool IsCnameEnabled;
        public readonly string ModifiedTime;
        public readonly string Modifiedby;
        public readonly string? Name;
        public readonly bool PassiveHealthEnabled;
        public readonly string SegmentGroupId;
        public readonly string SegmentGroupName;
        public readonly ImmutableArray<Outputs.GetZPAApplicationSegmentServerGroupResult> ServerGroups;
        public readonly ImmutableArray<string> TcpPortRanges;
        public readonly ImmutableArray<string> UdpPortRanges;

        [OutputConstructor]
        private GetZPAApplicationSegmentResult(
            string bypassType,

            string configSpace,

            string creationTime,

            string defaultIdleTimeout,

            string defaultMaxAge,

            string description,

            ImmutableArray<string> domainNames,

            bool doubleEncrypt,

            bool enabled,

            string healthChecktype,

            string healthReporting,

            string? id,

            bool ipAnchored,

            bool isCnameEnabled,

            string modifiedTime,

            string modifiedby,

            string? name,

            bool passiveHealthEnabled,

            string segmentGroupId,

            string segmentGroupName,

            ImmutableArray<Outputs.GetZPAApplicationSegmentServerGroupResult> serverGroups,

            ImmutableArray<string> tcpPortRanges,

            ImmutableArray<string> udpPortRanges)
        {
            BypassType = bypassType;
            ConfigSpace = configSpace;
            CreationTime = creationTime;
            DefaultIdleTimeout = defaultIdleTimeout;
            DefaultMaxAge = defaultMaxAge;
            Description = description;
            DomainNames = domainNames;
            DoubleEncrypt = doubleEncrypt;
            Enabled = enabled;
            HealthChecktype = healthChecktype;
            HealthReporting = healthReporting;
            Id = id;
            IpAnchored = ipAnchored;
            IsCnameEnabled = isCnameEnabled;
            ModifiedTime = modifiedTime;
            Modifiedby = modifiedby;
            Name = name;
            PassiveHealthEnabled = passiveHealthEnabled;
            SegmentGroupId = segmentGroupId;
            SegmentGroupName = segmentGroupName;
            ServerGroups = serverGroups;
            TcpPortRanges = tcpPortRanges;
            UdpPortRanges = udpPortRanges;
        }
    }
}
