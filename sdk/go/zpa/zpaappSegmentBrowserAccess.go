// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ZPAAppSegmentBrowserAccess struct {
	pulumi.CustomResourceState

	// Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
	// The value NEVER indicates the use of the client forwarding policy.
	BypassType     pulumi.StringPtrOutput                             `pulumi:"bypassType"`
	ClientlessApps ZPAAppSegmentBrowserAccessClientlessAppArrayOutput `pulumi:"clientlessApps"`
	ConfigSpace    pulumi.StringPtrOutput                             `pulumi:"configSpace"`
	// Description of the application.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// List of domains and IPs.
	DomainNames pulumi.StringArrayOutput `pulumi:"domainNames"`
	// Whether Double Encryption is enabled or disabled for the app.
	DoubleEncrypt   pulumi.BoolPtrOutput `pulumi:"doubleEncrypt"`
	Enabled         pulumi.BoolOutput    `pulumi:"enabled"`
	HealthCheckType pulumi.StringOutput  `pulumi:"healthCheckType"`
	// Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
	HealthReporting pulumi.StringOutput  `pulumi:"healthReporting"`
	IpAnchored      pulumi.BoolPtrOutput `pulumi:"ipAnchored"`
	// Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
	// connectors.
	IsCnameEnabled pulumi.BoolPtrOutput `pulumi:"isCnameEnabled"`
	// Name of the application.
	Name                 pulumi.StringOutput `pulumi:"name"`
	PassiveHealthEnabled pulumi.BoolOutput   `pulumi:"passiveHealthEnabled"`
	SegmentGroupId       pulumi.StringOutput `pulumi:"segmentGroupId"`
	SegmentGroupName     pulumi.StringOutput `pulumi:"segmentGroupName"`
	// List of the server group IDs.
	ServerGroups ZPAAppSegmentBrowserAccessServerGroupArrayOutput `pulumi:"serverGroups"`
	// TCP port ranges used to access the app.
	TcpPortRanges pulumi.StringArrayOutput `pulumi:"tcpPortRanges"`
	// UDP port ranges used to access the app.
	UdpPortRanges pulumi.StringArrayOutput `pulumi:"udpPortRanges"`
}

// NewZPAAppSegmentBrowserAccess registers a new resource with the given unique name, arguments, and options.
func NewZPAAppSegmentBrowserAccess(ctx *pulumi.Context,
	name string, args *ZPAAppSegmentBrowserAccessArgs, opts ...pulumi.ResourceOption) (*ZPAAppSegmentBrowserAccess, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SegmentGroupId == nil {
		return nil, errors.New("invalid value for required argument 'SegmentGroupId'")
	}
	if args.ServerGroups == nil {
		return nil, errors.New("invalid value for required argument 'ServerGroups'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ZPAAppSegmentBrowserAccess
	err := ctx.RegisterResource("zpa:index/zPAAppSegmentBrowserAccess:ZPAAppSegmentBrowserAccess", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZPAAppSegmentBrowserAccess gets an existing ZPAAppSegmentBrowserAccess resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZPAAppSegmentBrowserAccess(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZPAAppSegmentBrowserAccessState, opts ...pulumi.ResourceOption) (*ZPAAppSegmentBrowserAccess, error) {
	var resource ZPAAppSegmentBrowserAccess
	err := ctx.ReadResource("zpa:index/zPAAppSegmentBrowserAccess:ZPAAppSegmentBrowserAccess", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZPAAppSegmentBrowserAccess resources.
type zpaappSegmentBrowserAccessState struct {
	// Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
	// The value NEVER indicates the use of the client forwarding policy.
	BypassType     *string                                   `pulumi:"bypassType"`
	ClientlessApps []ZPAAppSegmentBrowserAccessClientlessApp `pulumi:"clientlessApps"`
	ConfigSpace    *string                                   `pulumi:"configSpace"`
	// Description of the application.
	Description *string `pulumi:"description"`
	// List of domains and IPs.
	DomainNames []string `pulumi:"domainNames"`
	// Whether Double Encryption is enabled or disabled for the app.
	DoubleEncrypt   *bool   `pulumi:"doubleEncrypt"`
	Enabled         *bool   `pulumi:"enabled"`
	HealthCheckType *string `pulumi:"healthCheckType"`
	// Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
	HealthReporting *string `pulumi:"healthReporting"`
	IpAnchored      *bool   `pulumi:"ipAnchored"`
	// Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
	// connectors.
	IsCnameEnabled *bool `pulumi:"isCnameEnabled"`
	// Name of the application.
	Name                 *string `pulumi:"name"`
	PassiveHealthEnabled *bool   `pulumi:"passiveHealthEnabled"`
	SegmentGroupId       *string `pulumi:"segmentGroupId"`
	SegmentGroupName     *string `pulumi:"segmentGroupName"`
	// List of the server group IDs.
	ServerGroups []ZPAAppSegmentBrowserAccessServerGroup `pulumi:"serverGroups"`
	// TCP port ranges used to access the app.
	TcpPortRanges []string `pulumi:"tcpPortRanges"`
	// UDP port ranges used to access the app.
	UdpPortRanges []string `pulumi:"udpPortRanges"`
}

type ZPAAppSegmentBrowserAccessState struct {
	// Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
	// The value NEVER indicates the use of the client forwarding policy.
	BypassType     pulumi.StringPtrInput
	ClientlessApps ZPAAppSegmentBrowserAccessClientlessAppArrayInput
	ConfigSpace    pulumi.StringPtrInput
	// Description of the application.
	Description pulumi.StringPtrInput
	// List of domains and IPs.
	DomainNames pulumi.StringArrayInput
	// Whether Double Encryption is enabled or disabled for the app.
	DoubleEncrypt   pulumi.BoolPtrInput
	Enabled         pulumi.BoolPtrInput
	HealthCheckType pulumi.StringPtrInput
	// Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
	HealthReporting pulumi.StringPtrInput
	IpAnchored      pulumi.BoolPtrInput
	// Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
	// connectors.
	IsCnameEnabled pulumi.BoolPtrInput
	// Name of the application.
	Name                 pulumi.StringPtrInput
	PassiveHealthEnabled pulumi.BoolPtrInput
	SegmentGroupId       pulumi.StringPtrInput
	SegmentGroupName     pulumi.StringPtrInput
	// List of the server group IDs.
	ServerGroups ZPAAppSegmentBrowserAccessServerGroupArrayInput
	// TCP port ranges used to access the app.
	TcpPortRanges pulumi.StringArrayInput
	// UDP port ranges used to access the app.
	UdpPortRanges pulumi.StringArrayInput
}

func (ZPAAppSegmentBrowserAccessState) ElementType() reflect.Type {
	return reflect.TypeOf((*zpaappSegmentBrowserAccessState)(nil)).Elem()
}

type zpaappSegmentBrowserAccessArgs struct {
	// Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
	// The value NEVER indicates the use of the client forwarding policy.
	BypassType     *string                                   `pulumi:"bypassType"`
	ClientlessApps []ZPAAppSegmentBrowserAccessClientlessApp `pulumi:"clientlessApps"`
	ConfigSpace    *string                                   `pulumi:"configSpace"`
	// Description of the application.
	Description *string `pulumi:"description"`
	// List of domains and IPs.
	DomainNames []string `pulumi:"domainNames"`
	// Whether Double Encryption is enabled or disabled for the app.
	DoubleEncrypt   *bool   `pulumi:"doubleEncrypt"`
	Enabled         *bool   `pulumi:"enabled"`
	HealthCheckType *string `pulumi:"healthCheckType"`
	// Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
	HealthReporting *string `pulumi:"healthReporting"`
	IpAnchored      *bool   `pulumi:"ipAnchored"`
	// Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
	// connectors.
	IsCnameEnabled *bool `pulumi:"isCnameEnabled"`
	// Name of the application.
	Name                 *string `pulumi:"name"`
	PassiveHealthEnabled *bool   `pulumi:"passiveHealthEnabled"`
	SegmentGroupId       string  `pulumi:"segmentGroupId"`
	SegmentGroupName     *string `pulumi:"segmentGroupName"`
	// List of the server group IDs.
	ServerGroups []ZPAAppSegmentBrowserAccessServerGroup `pulumi:"serverGroups"`
	// TCP port ranges used to access the app.
	TcpPortRanges []string `pulumi:"tcpPortRanges"`
	// UDP port ranges used to access the app.
	UdpPortRanges []string `pulumi:"udpPortRanges"`
}

// The set of arguments for constructing a ZPAAppSegmentBrowserAccess resource.
type ZPAAppSegmentBrowserAccessArgs struct {
	// Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
	// The value NEVER indicates the use of the client forwarding policy.
	BypassType     pulumi.StringPtrInput
	ClientlessApps ZPAAppSegmentBrowserAccessClientlessAppArrayInput
	ConfigSpace    pulumi.StringPtrInput
	// Description of the application.
	Description pulumi.StringPtrInput
	// List of domains and IPs.
	DomainNames pulumi.StringArrayInput
	// Whether Double Encryption is enabled or disabled for the app.
	DoubleEncrypt   pulumi.BoolPtrInput
	Enabled         pulumi.BoolPtrInput
	HealthCheckType pulumi.StringPtrInput
	// Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
	HealthReporting pulumi.StringPtrInput
	IpAnchored      pulumi.BoolPtrInput
	// Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
	// connectors.
	IsCnameEnabled pulumi.BoolPtrInput
	// Name of the application.
	Name                 pulumi.StringPtrInput
	PassiveHealthEnabled pulumi.BoolPtrInput
	SegmentGroupId       pulumi.StringInput
	SegmentGroupName     pulumi.StringPtrInput
	// List of the server group IDs.
	ServerGroups ZPAAppSegmentBrowserAccessServerGroupArrayInput
	// TCP port ranges used to access the app.
	TcpPortRanges pulumi.StringArrayInput
	// UDP port ranges used to access the app.
	UdpPortRanges pulumi.StringArrayInput
}

func (ZPAAppSegmentBrowserAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zpaappSegmentBrowserAccessArgs)(nil)).Elem()
}

type ZPAAppSegmentBrowserAccessInput interface {
	pulumi.Input

	ToZPAAppSegmentBrowserAccessOutput() ZPAAppSegmentBrowserAccessOutput
	ToZPAAppSegmentBrowserAccessOutputWithContext(ctx context.Context) ZPAAppSegmentBrowserAccessOutput
}

func (*ZPAAppSegmentBrowserAccess) ElementType() reflect.Type {
	return reflect.TypeOf((**ZPAAppSegmentBrowserAccess)(nil)).Elem()
}

func (i *ZPAAppSegmentBrowserAccess) ToZPAAppSegmentBrowserAccessOutput() ZPAAppSegmentBrowserAccessOutput {
	return i.ToZPAAppSegmentBrowserAccessOutputWithContext(context.Background())
}

func (i *ZPAAppSegmentBrowserAccess) ToZPAAppSegmentBrowserAccessOutputWithContext(ctx context.Context) ZPAAppSegmentBrowserAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZPAAppSegmentBrowserAccessOutput)
}

// ZPAAppSegmentBrowserAccessArrayInput is an input type that accepts ZPAAppSegmentBrowserAccessArray and ZPAAppSegmentBrowserAccessArrayOutput values.
// You can construct a concrete instance of `ZPAAppSegmentBrowserAccessArrayInput` via:
//
//          ZPAAppSegmentBrowserAccessArray{ ZPAAppSegmentBrowserAccessArgs{...} }
type ZPAAppSegmentBrowserAccessArrayInput interface {
	pulumi.Input

	ToZPAAppSegmentBrowserAccessArrayOutput() ZPAAppSegmentBrowserAccessArrayOutput
	ToZPAAppSegmentBrowserAccessArrayOutputWithContext(context.Context) ZPAAppSegmentBrowserAccessArrayOutput
}

type ZPAAppSegmentBrowserAccessArray []ZPAAppSegmentBrowserAccessInput

func (ZPAAppSegmentBrowserAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZPAAppSegmentBrowserAccess)(nil)).Elem()
}

func (i ZPAAppSegmentBrowserAccessArray) ToZPAAppSegmentBrowserAccessArrayOutput() ZPAAppSegmentBrowserAccessArrayOutput {
	return i.ToZPAAppSegmentBrowserAccessArrayOutputWithContext(context.Background())
}

func (i ZPAAppSegmentBrowserAccessArray) ToZPAAppSegmentBrowserAccessArrayOutputWithContext(ctx context.Context) ZPAAppSegmentBrowserAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZPAAppSegmentBrowserAccessArrayOutput)
}

// ZPAAppSegmentBrowserAccessMapInput is an input type that accepts ZPAAppSegmentBrowserAccessMap and ZPAAppSegmentBrowserAccessMapOutput values.
// You can construct a concrete instance of `ZPAAppSegmentBrowserAccessMapInput` via:
//
//          ZPAAppSegmentBrowserAccessMap{ "key": ZPAAppSegmentBrowserAccessArgs{...} }
type ZPAAppSegmentBrowserAccessMapInput interface {
	pulumi.Input

	ToZPAAppSegmentBrowserAccessMapOutput() ZPAAppSegmentBrowserAccessMapOutput
	ToZPAAppSegmentBrowserAccessMapOutputWithContext(context.Context) ZPAAppSegmentBrowserAccessMapOutput
}

type ZPAAppSegmentBrowserAccessMap map[string]ZPAAppSegmentBrowserAccessInput

func (ZPAAppSegmentBrowserAccessMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZPAAppSegmentBrowserAccess)(nil)).Elem()
}

func (i ZPAAppSegmentBrowserAccessMap) ToZPAAppSegmentBrowserAccessMapOutput() ZPAAppSegmentBrowserAccessMapOutput {
	return i.ToZPAAppSegmentBrowserAccessMapOutputWithContext(context.Background())
}

func (i ZPAAppSegmentBrowserAccessMap) ToZPAAppSegmentBrowserAccessMapOutputWithContext(ctx context.Context) ZPAAppSegmentBrowserAccessMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZPAAppSegmentBrowserAccessMapOutput)
}

type ZPAAppSegmentBrowserAccessOutput struct{ *pulumi.OutputState }

func (ZPAAppSegmentBrowserAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZPAAppSegmentBrowserAccess)(nil)).Elem()
}

func (o ZPAAppSegmentBrowserAccessOutput) ToZPAAppSegmentBrowserAccessOutput() ZPAAppSegmentBrowserAccessOutput {
	return o
}

func (o ZPAAppSegmentBrowserAccessOutput) ToZPAAppSegmentBrowserAccessOutputWithContext(ctx context.Context) ZPAAppSegmentBrowserAccessOutput {
	return o
}

// Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
// The value NEVER indicates the use of the client forwarding policy.
func (o ZPAAppSegmentBrowserAccessOutput) BypassType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZPAAppSegmentBrowserAccess) pulumi.StringPtrOutput { return v.BypassType }).(pulumi.StringPtrOutput)
}

func (o ZPAAppSegmentBrowserAccessOutput) ClientlessApps() ZPAAppSegmentBrowserAccessClientlessAppArrayOutput {
	return o.ApplyT(func(v *ZPAAppSegmentBrowserAccess) ZPAAppSegmentBrowserAccessClientlessAppArrayOutput {
		return v.ClientlessApps
	}).(ZPAAppSegmentBrowserAccessClientlessAppArrayOutput)
}

func (o ZPAAppSegmentBrowserAccessOutput) ConfigSpace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZPAAppSegmentBrowserAccess) pulumi.StringPtrOutput { return v.ConfigSpace }).(pulumi.StringPtrOutput)
}

// Description of the application.
func (o ZPAAppSegmentBrowserAccessOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZPAAppSegmentBrowserAccess) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// List of domains and IPs.
func (o ZPAAppSegmentBrowserAccessOutput) DomainNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZPAAppSegmentBrowserAccess) pulumi.StringArrayOutput { return v.DomainNames }).(pulumi.StringArrayOutput)
}

// Whether Double Encryption is enabled or disabled for the app.
func (o ZPAAppSegmentBrowserAccessOutput) DoubleEncrypt() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZPAAppSegmentBrowserAccess) pulumi.BoolPtrOutput { return v.DoubleEncrypt }).(pulumi.BoolPtrOutput)
}

func (o ZPAAppSegmentBrowserAccessOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZPAAppSegmentBrowserAccess) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o ZPAAppSegmentBrowserAccessOutput) HealthCheckType() pulumi.StringOutput {
	return o.ApplyT(func(v *ZPAAppSegmentBrowserAccess) pulumi.StringOutput { return v.HealthCheckType }).(pulumi.StringOutput)
}

// Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
func (o ZPAAppSegmentBrowserAccessOutput) HealthReporting() pulumi.StringOutput {
	return o.ApplyT(func(v *ZPAAppSegmentBrowserAccess) pulumi.StringOutput { return v.HealthReporting }).(pulumi.StringOutput)
}

func (o ZPAAppSegmentBrowserAccessOutput) IpAnchored() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZPAAppSegmentBrowserAccess) pulumi.BoolPtrOutput { return v.IpAnchored }).(pulumi.BoolPtrOutput)
}

// Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
// connectors.
func (o ZPAAppSegmentBrowserAccessOutput) IsCnameEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZPAAppSegmentBrowserAccess) pulumi.BoolPtrOutput { return v.IsCnameEnabled }).(pulumi.BoolPtrOutput)
}

// Name of the application.
func (o ZPAAppSegmentBrowserAccessOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ZPAAppSegmentBrowserAccess) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ZPAAppSegmentBrowserAccessOutput) PassiveHealthEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZPAAppSegmentBrowserAccess) pulumi.BoolOutput { return v.PassiveHealthEnabled }).(pulumi.BoolOutput)
}

func (o ZPAAppSegmentBrowserAccessOutput) SegmentGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ZPAAppSegmentBrowserAccess) pulumi.StringOutput { return v.SegmentGroupId }).(pulumi.StringOutput)
}

func (o ZPAAppSegmentBrowserAccessOutput) SegmentGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ZPAAppSegmentBrowserAccess) pulumi.StringOutput { return v.SegmentGroupName }).(pulumi.StringOutput)
}

// List of the server group IDs.
func (o ZPAAppSegmentBrowserAccessOutput) ServerGroups() ZPAAppSegmentBrowserAccessServerGroupArrayOutput {
	return o.ApplyT(func(v *ZPAAppSegmentBrowserAccess) ZPAAppSegmentBrowserAccessServerGroupArrayOutput {
		return v.ServerGroups
	}).(ZPAAppSegmentBrowserAccessServerGroupArrayOutput)
}

// TCP port ranges used to access the app.
func (o ZPAAppSegmentBrowserAccessOutput) TcpPortRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZPAAppSegmentBrowserAccess) pulumi.StringArrayOutput { return v.TcpPortRanges }).(pulumi.StringArrayOutput)
}

// UDP port ranges used to access the app.
func (o ZPAAppSegmentBrowserAccessOutput) UdpPortRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZPAAppSegmentBrowserAccess) pulumi.StringArrayOutput { return v.UdpPortRanges }).(pulumi.StringArrayOutput)
}

type ZPAAppSegmentBrowserAccessArrayOutput struct{ *pulumi.OutputState }

func (ZPAAppSegmentBrowserAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZPAAppSegmentBrowserAccess)(nil)).Elem()
}

func (o ZPAAppSegmentBrowserAccessArrayOutput) ToZPAAppSegmentBrowserAccessArrayOutput() ZPAAppSegmentBrowserAccessArrayOutput {
	return o
}

func (o ZPAAppSegmentBrowserAccessArrayOutput) ToZPAAppSegmentBrowserAccessArrayOutputWithContext(ctx context.Context) ZPAAppSegmentBrowserAccessArrayOutput {
	return o
}

func (o ZPAAppSegmentBrowserAccessArrayOutput) Index(i pulumi.IntInput) ZPAAppSegmentBrowserAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZPAAppSegmentBrowserAccess {
		return vs[0].([]*ZPAAppSegmentBrowserAccess)[vs[1].(int)]
	}).(ZPAAppSegmentBrowserAccessOutput)
}

type ZPAAppSegmentBrowserAccessMapOutput struct{ *pulumi.OutputState }

func (ZPAAppSegmentBrowserAccessMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZPAAppSegmentBrowserAccess)(nil)).Elem()
}

func (o ZPAAppSegmentBrowserAccessMapOutput) ToZPAAppSegmentBrowserAccessMapOutput() ZPAAppSegmentBrowserAccessMapOutput {
	return o
}

func (o ZPAAppSegmentBrowserAccessMapOutput) ToZPAAppSegmentBrowserAccessMapOutputWithContext(ctx context.Context) ZPAAppSegmentBrowserAccessMapOutput {
	return o
}

func (o ZPAAppSegmentBrowserAccessMapOutput) MapIndex(k pulumi.StringInput) ZPAAppSegmentBrowserAccessOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZPAAppSegmentBrowserAccess {
		return vs[0].(map[string]*ZPAAppSegmentBrowserAccess)[vs[1].(string)]
	}).(ZPAAppSegmentBrowserAccessOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZPAAppSegmentBrowserAccessInput)(nil)).Elem(), &ZPAAppSegmentBrowserAccess{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZPAAppSegmentBrowserAccessArrayInput)(nil)).Elem(), ZPAAppSegmentBrowserAccessArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZPAAppSegmentBrowserAccessMapInput)(nil)).Elem(), ZPAAppSegmentBrowserAccessMap{})
	pulumi.RegisterOutputType(ZPAAppSegmentBrowserAccessOutput{})
	pulumi.RegisterOutputType(ZPAAppSegmentBrowserAccessArrayOutput{})
	pulumi.RegisterOutputType(ZPAAppSegmentBrowserAccessMapOutput{})
}
