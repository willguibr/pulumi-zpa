// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zpa

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ZPAApplicationServer struct {
	pulumi.CustomResourceState

	// This field defines the domain or IP address of the server.
	Address pulumi.StringOutput `pulumi:"address"`
	// This field defines the list of server groups IDs.
	AppServerGroupIds pulumi.StringArrayOutput `pulumi:"appServerGroupIds"`
	ConfigSpace       pulumi.StringPtrOutput   `pulumi:"configSpace"`
	// This field defines the description of the server.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// This field defines the status of the server.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// This field defines the name of the server.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewZPAApplicationServer registers a new resource with the given unique name, arguments, and options.
func NewZPAApplicationServer(ctx *pulumi.Context,
	name string, args *ZPAApplicationServerArgs, opts ...pulumi.ResourceOption) (*ZPAApplicationServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ZPAApplicationServer
	err := ctx.RegisterResource("zpa:index/zPAApplicationServer:ZPAApplicationServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZPAApplicationServer gets an existing ZPAApplicationServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZPAApplicationServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZPAApplicationServerState, opts ...pulumi.ResourceOption) (*ZPAApplicationServer, error) {
	var resource ZPAApplicationServer
	err := ctx.ReadResource("zpa:index/zPAApplicationServer:ZPAApplicationServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZPAApplicationServer resources.
type zpaapplicationServerState struct {
	// This field defines the domain or IP address of the server.
	Address *string `pulumi:"address"`
	// This field defines the list of server groups IDs.
	AppServerGroupIds []string `pulumi:"appServerGroupIds"`
	ConfigSpace       *string  `pulumi:"configSpace"`
	// This field defines the description of the server.
	Description *string `pulumi:"description"`
	// This field defines the status of the server.
	Enabled *bool `pulumi:"enabled"`
	// This field defines the name of the server.
	Name *string `pulumi:"name"`
}

type ZPAApplicationServerState struct {
	// This field defines the domain or IP address of the server.
	Address pulumi.StringPtrInput
	// This field defines the list of server groups IDs.
	AppServerGroupIds pulumi.StringArrayInput
	ConfigSpace       pulumi.StringPtrInput
	// This field defines the description of the server.
	Description pulumi.StringPtrInput
	// This field defines the status of the server.
	Enabled pulumi.BoolPtrInput
	// This field defines the name of the server.
	Name pulumi.StringPtrInput
}

func (ZPAApplicationServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*zpaapplicationServerState)(nil)).Elem()
}

type zpaapplicationServerArgs struct {
	// This field defines the domain or IP address of the server.
	Address string `pulumi:"address"`
	// This field defines the list of server groups IDs.
	AppServerGroupIds []string `pulumi:"appServerGroupIds"`
	ConfigSpace       *string  `pulumi:"configSpace"`
	// This field defines the description of the server.
	Description *string `pulumi:"description"`
	// This field defines the status of the server.
	Enabled *bool `pulumi:"enabled"`
	// This field defines the name of the server.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a ZPAApplicationServer resource.
type ZPAApplicationServerArgs struct {
	// This field defines the domain or IP address of the server.
	Address pulumi.StringInput
	// This field defines the list of server groups IDs.
	AppServerGroupIds pulumi.StringArrayInput
	ConfigSpace       pulumi.StringPtrInput
	// This field defines the description of the server.
	Description pulumi.StringPtrInput
	// This field defines the status of the server.
	Enabled pulumi.BoolPtrInput
	// This field defines the name of the server.
	Name pulumi.StringPtrInput
}

func (ZPAApplicationServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zpaapplicationServerArgs)(nil)).Elem()
}

type ZPAApplicationServerInput interface {
	pulumi.Input

	ToZPAApplicationServerOutput() ZPAApplicationServerOutput
	ToZPAApplicationServerOutputWithContext(ctx context.Context) ZPAApplicationServerOutput
}

func (*ZPAApplicationServer) ElementType() reflect.Type {
	return reflect.TypeOf((**ZPAApplicationServer)(nil)).Elem()
}

func (i *ZPAApplicationServer) ToZPAApplicationServerOutput() ZPAApplicationServerOutput {
	return i.ToZPAApplicationServerOutputWithContext(context.Background())
}

func (i *ZPAApplicationServer) ToZPAApplicationServerOutputWithContext(ctx context.Context) ZPAApplicationServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZPAApplicationServerOutput)
}

// ZPAApplicationServerArrayInput is an input type that accepts ZPAApplicationServerArray and ZPAApplicationServerArrayOutput values.
// You can construct a concrete instance of `ZPAApplicationServerArrayInput` via:
//
//          ZPAApplicationServerArray{ ZPAApplicationServerArgs{...} }
type ZPAApplicationServerArrayInput interface {
	pulumi.Input

	ToZPAApplicationServerArrayOutput() ZPAApplicationServerArrayOutput
	ToZPAApplicationServerArrayOutputWithContext(context.Context) ZPAApplicationServerArrayOutput
}

type ZPAApplicationServerArray []ZPAApplicationServerInput

func (ZPAApplicationServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZPAApplicationServer)(nil)).Elem()
}

func (i ZPAApplicationServerArray) ToZPAApplicationServerArrayOutput() ZPAApplicationServerArrayOutput {
	return i.ToZPAApplicationServerArrayOutputWithContext(context.Background())
}

func (i ZPAApplicationServerArray) ToZPAApplicationServerArrayOutputWithContext(ctx context.Context) ZPAApplicationServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZPAApplicationServerArrayOutput)
}

// ZPAApplicationServerMapInput is an input type that accepts ZPAApplicationServerMap and ZPAApplicationServerMapOutput values.
// You can construct a concrete instance of `ZPAApplicationServerMapInput` via:
//
//          ZPAApplicationServerMap{ "key": ZPAApplicationServerArgs{...} }
type ZPAApplicationServerMapInput interface {
	pulumi.Input

	ToZPAApplicationServerMapOutput() ZPAApplicationServerMapOutput
	ToZPAApplicationServerMapOutputWithContext(context.Context) ZPAApplicationServerMapOutput
}

type ZPAApplicationServerMap map[string]ZPAApplicationServerInput

func (ZPAApplicationServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZPAApplicationServer)(nil)).Elem()
}

func (i ZPAApplicationServerMap) ToZPAApplicationServerMapOutput() ZPAApplicationServerMapOutput {
	return i.ToZPAApplicationServerMapOutputWithContext(context.Background())
}

func (i ZPAApplicationServerMap) ToZPAApplicationServerMapOutputWithContext(ctx context.Context) ZPAApplicationServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZPAApplicationServerMapOutput)
}

type ZPAApplicationServerOutput struct{ *pulumi.OutputState }

func (ZPAApplicationServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZPAApplicationServer)(nil)).Elem()
}

func (o ZPAApplicationServerOutput) ToZPAApplicationServerOutput() ZPAApplicationServerOutput {
	return o
}

func (o ZPAApplicationServerOutput) ToZPAApplicationServerOutputWithContext(ctx context.Context) ZPAApplicationServerOutput {
	return o
}

// This field defines the domain or IP address of the server.
func (o ZPAApplicationServerOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *ZPAApplicationServer) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// This field defines the list of server groups IDs.
func (o ZPAApplicationServerOutput) AppServerGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZPAApplicationServer) pulumi.StringArrayOutput { return v.AppServerGroupIds }).(pulumi.StringArrayOutput)
}

func (o ZPAApplicationServerOutput) ConfigSpace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZPAApplicationServer) pulumi.StringPtrOutput { return v.ConfigSpace }).(pulumi.StringPtrOutput)
}

// This field defines the description of the server.
func (o ZPAApplicationServerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZPAApplicationServer) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// This field defines the status of the server.
func (o ZPAApplicationServerOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZPAApplicationServer) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// This field defines the name of the server.
func (o ZPAApplicationServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ZPAApplicationServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type ZPAApplicationServerArrayOutput struct{ *pulumi.OutputState }

func (ZPAApplicationServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZPAApplicationServer)(nil)).Elem()
}

func (o ZPAApplicationServerArrayOutput) ToZPAApplicationServerArrayOutput() ZPAApplicationServerArrayOutput {
	return o
}

func (o ZPAApplicationServerArrayOutput) ToZPAApplicationServerArrayOutputWithContext(ctx context.Context) ZPAApplicationServerArrayOutput {
	return o
}

func (o ZPAApplicationServerArrayOutput) Index(i pulumi.IntInput) ZPAApplicationServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZPAApplicationServer {
		return vs[0].([]*ZPAApplicationServer)[vs[1].(int)]
	}).(ZPAApplicationServerOutput)
}

type ZPAApplicationServerMapOutput struct{ *pulumi.OutputState }

func (ZPAApplicationServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZPAApplicationServer)(nil)).Elem()
}

func (o ZPAApplicationServerMapOutput) ToZPAApplicationServerMapOutput() ZPAApplicationServerMapOutput {
	return o
}

func (o ZPAApplicationServerMapOutput) ToZPAApplicationServerMapOutputWithContext(ctx context.Context) ZPAApplicationServerMapOutput {
	return o
}

func (o ZPAApplicationServerMapOutput) MapIndex(k pulumi.StringInput) ZPAApplicationServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZPAApplicationServer {
		return vs[0].(map[string]*ZPAApplicationServer)[vs[1].(string)]
	}).(ZPAApplicationServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZPAApplicationServerInput)(nil)).Elem(), &ZPAApplicationServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZPAApplicationServerArrayInput)(nil)).Elem(), ZPAApplicationServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZPAApplicationServerMapInput)(nil)).Elem(), ZPAApplicationServerMap{})
	pulumi.RegisterOutputType(ZPAApplicationServerOutput{})
	pulumi.RegisterOutputType(ZPAApplicationServerArrayOutput{})
	pulumi.RegisterOutputType(ZPAApplicationServerMapOutput{})
}
