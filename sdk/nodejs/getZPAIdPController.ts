// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export function getZPAIdPController(args?: GetZPAIdPControllerArgs, opts?: pulumi.InvokeOptions): Promise<GetZPAIdPControllerResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("zpa:index/getZPAIdPController:getZPAIdPController", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getZPAIdPController.
 */
export interface GetZPAIdPControllerArgs {
    id?: string;
    name?: string;
}

/**
 * A collection of values returned by getZPAIdPController.
 */
export interface GetZPAIdPControllerResult {
    readonly adminMetadatas: outputs.GetZPAIdPControllerAdminMetadata[];
    readonly adminSpSigningCertId: string;
    readonly autoProvision: string;
    readonly creationTime: string;
    readonly description: string;
    readonly disableSamlBasedPolicy: boolean;
    readonly domainLists: string[];
    readonly enableScimBasedPolicy: boolean;
    readonly enabled: boolean;
    readonly id: string;
    readonly idpEntityId: string;
    readonly loginNameAttribute: string;
    readonly loginUrl: string;
    readonly modifiedTime: string;
    readonly modifiedby: string;
    readonly name: string;
    readonly reauthOnUserUpdate: boolean;
    readonly redirectBinding: boolean;
    readonly scimEnabled: boolean;
    readonly scimServiceProviderEndpoint: string;
    readonly scimSharedSecretExists: boolean;
    readonly signSamlRequest: string;
    readonly ssoTypes: string[];
    readonly useCustomSpMetadata: boolean;
    readonly userMetadatas: outputs.GetZPAIdPControllerUserMetadata[];
    readonly userSpSigningCertId: string;
}

export function getZPAIdPControllerOutput(args?: GetZPAIdPControllerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetZPAIdPControllerResult> {
    return pulumi.output(args).apply(a => getZPAIdPController(a, opts))
}

/**
 * A collection of arguments for invoking getZPAIdPController.
 */
export interface GetZPAIdPControllerOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
