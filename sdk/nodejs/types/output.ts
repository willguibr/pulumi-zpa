// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface GetZPAAppConnectorGroupConnector {
    appconnectorGroupId: string;
    appconnectorGroupName: string;
    applicationStartTime: string;
    controlChannelStatus: string;
    creationTime: string;
    ctrlBrokerName: string;
    currentVersion: string;
    description: string;
    enabled: boolean;
    enrollmentCert: {[key: string]: any};
    expectedUpgradeTime: string;
    expectedVersion: string;
    fingerprint: string;
    id: string;
    ipacl: string;
    issuedCertId: string;
    lastBrokerConnectTime: string;
    lastBrokerConnectTimeDuration: string;
    lastBrokerDisconnectTime: string;
    lastBrokerDisconnectTimeDuration: string;
    lastUpgradeTime: string;
    latitude: string;
    location: string;
    longitude: string;
    modifiedTime: string;
    modifiedby: string;
    name: string;
    platform: string;
    previousVersion: string;
    privateIp: string;
    provisioningKeyId: string;
    provisioningKeyName: string;
    publicIp: string;
    sargeVersion: string;
    upgradeAttempt: string;
    upgradeStatus: string;
}

export interface GetZPAAppConnectorGroupServerGroup {
    configSpace: string;
    creationTime: string;
    description: string;
    dynamicDiscovery: boolean;
    enabled: boolean;
    id: string;
    modifiedTime: string;
    modifiedby: string;
    name: string;
}

export interface GetZPAAppSegmentBrowserAccessClientlessApp {
    allowOptions: boolean;
    appId: string;
    applicationPort: string;
    applicationProtocol: string;
    certificateId: string;
    certificateName: string;
    cname: string;
    description: string;
    domain: string;
    enabled: boolean;
    hidden: boolean;
    id: string;
    localDomain: string;
    name: string;
    path: string;
    trustUntrustedCert: boolean;
}

export interface GetZPAAppSegmentBrowserAccessServerGroup {
    ids: string[];
}

export interface GetZPAApplicationSegmentServerGroup {
    configSpace: string;
    creationTime: string;
    description: string;
    dynamicDiscovery: boolean;
    enabled: boolean;
    id: string;
    modifiedTime: string;
    modifiedby: string;
    name: string;
}

export interface GetZPACloudConnectorGroupCloudConnector {
    creationTime: string;
    description: string;
    enabled: boolean;
    fingerprint: string;
    id: string;
    ipacls: any[];
    issuedCertId: string;
    modifiedTime: string;
    modifiedby: string;
    name: string;
    signingCert: {[key: string]: any};
}

export interface GetZPACustomerVersionProfileCustomScopeCustomerId {
    customerId: string;
    excludeConstellation: boolean;
    name: string;
}

export interface GetZPACustomerVersionProfileVersion {
    creationTime: string;
    customerId: string;
    id: string;
    modifiedTime: string;
    modifiedby: string;
    platform: string;
    restartAfterUptimeInDays: string;
    role: string;
    version: string;
    versionProfileGid: string;
}

export interface GetZPAIdPControllerAdminMetadata {
    certificateUrl: string;
    spBaseUrl: string;
    spEntityId: string;
    spMetadataUrl: string;
    spPostUrl: string;
}

export interface GetZPAIdPControllerUserMetadata {
    certificateUrl: string;
    spBaseUrl: string;
    spEntityId: string;
    spMetadataUrl: string;
    spPostUrl: string;
}

export interface GetZPALSSConfigMachineGroupMachine {
    creationTime: string;
    description: string;
    fingerprint: string;
    id: string;
    issuedCertId: string;
    machineGroupId: string;
    machineGroupName: string;
    machineTokenId: string;
    modifiedTime: string;
    modifiedby: string;
    name: string;
    signingCert: {[key: string]: string};
}

export interface GetZPALogStreamingServiceConfig {
    auditMessage: string;
    description: string;
    enabled: boolean;
    filters: string[];
    format: string;
    id: string;
    lssHost: string;
    lssPort: string;
    name: string;
    sourceLogType: string;
    useTls: boolean;
}

export interface GetZPALogStreamingServiceConnectorGroup {
    id: string;
}

export interface GetZPALogStreamingServicePolicyRule {
    action: string;
    actionId: string;
    bypassDefaultRule: boolean;
    conditions: outputs.GetZPALogStreamingServicePolicyRuleCondition[];
    creationTime: string;
    customMsg: string;
    defaultRule: boolean;
    description: string;
    id: string;
    isolationDefaultRule: boolean;
    lssDefaultRule: boolean;
    modifiedTime: string;
    modifiedby: string;
    name: string;
    operator: string;
    policySetId: string;
    policyType: string;
    priority: string;
    reauthDefaultRule: boolean;
    reauthIdleTimeout: string;
    reauthTimeout: string;
    ruleOrder: string;
    zpnCbiProfileId: string;
    zpnInspectionProfileId: string;
    zpnInspectionProfileName: string;
}

export interface GetZPALogStreamingServicePolicyRuleCondition {
    creationTime: string;
    id: string;
    modifiedTime: string;
    modifiedby: string;
    negated: boolean;
    operands: outputs.GetZPALogStreamingServicePolicyRuleConditionOperand[];
    operator: string;
}

export interface GetZPALogStreamingServicePolicyRuleConditionOperand {
    creationTime: string;
    id: string;
    idpId: string;
    lhs: string;
    modifiedTime: string;
    modifiedby: string;
    name: string;
    objectType: string;
    operator: string;
    rhs: string;
}

export interface GetZPAPolicyTypeRule {
    action: string;
    actionId: string;
    bypassDefaultRule: boolean;
    conditions: outputs.GetZPAPolicyTypeRuleCondition[];
    creationTime: string;
    customMsg: string;
    description: string;
    id: string;
    isolationDefaultRule: boolean;
    modifiedTime: string;
    modifiedby: string;
    name: string;
    operator: string;
    policySetId: string;
    policyType: string;
    priority: string;
    reauthDefaultRule: boolean;
    reauthIdleTimeout: string;
    reauthTimeout: string;
    ruleOrder: string;
    zpnCbiProfileId: string;
    zpnInspectionProfileId: string;
    zpnInspectionProfileName: string;
}

export interface GetZPAPolicyTypeRuleCondition {
    creationTime: string;
    id: string;
    modifiedTime: string;
    modifiedby: string;
    negated: boolean;
    operands: outputs.GetZPAPolicyTypeRuleConditionOperand[];
    operator: string;
}

export interface GetZPAPolicyTypeRuleConditionOperand {
    creationTime: string;
    id: string;
    idpId: string;
    lhs: string;
    modifiedTime: string;
    modifiedby: string;
    name: string;
    objectType: string;
    operator: string;
    rhs: string;
}

export interface GetZPASegmentGroupApplication {
    bypassType: string;
    configSpace: string;
    creationTime: string;
    defaultIdleTimeout: string;
    defaultMaxAge: string;
    description: string;
    domainName: string;
    domainNames: string[];
    doubleEncrypt: boolean;
    enabled: boolean;
    healthCheckType: string;
    id: string;
    ipAnchored: boolean;
    logFeatures: string[];
    modifiedTime: string;
    modifiedby: string;
    name: string;
    passiveHealthEnabled: boolean;
    serverGroups: outputs.GetZPASegmentGroupApplicationServerGroup[];
    tcpPortRanges: string[];
    tcpPortsIns: string[];
    tcpPortsOuts: string[];
    udpPortRanges: string[];
}

export interface GetZPASegmentGroupApplicationServerGroup {
    configSpace: string;
    creationTime: string;
    description: string;
    dynamicDiscovery: boolean;
    enabled: boolean;
    id: string;
    modifiedTime: string;
    modifiedby: string;
    name: string;
}

export interface GetZPAServerGroupAppConnectorGroup {
    cityCountry: string;
    connectors: outputs.GetZPAServerGroupAppConnectorGroupConnector[];
    countryCode: string;
    creationTime: string;
    description: string;
    dnsQueryType: string;
    enabled: boolean;
    geolocationId: string;
    id: string;
    latitude: string;
    location: string;
    longitude: string;
    modifiedTime: string;
    modifiedby: string;
    name: string;
    serverGroups: outputs.GetZPAServerGroupAppConnectorGroupServerGroup[];
    siemAppConnectorGroup: boolean;
    upgradeDay: string;
    upgradeTimeInSecs: string;
    versionProfileId: string;
}

export interface GetZPAServerGroupAppConnectorGroupConnector {
    creationTime: string;
    description: string;
    enabled: boolean;
    fingerprint: string;
    id: string;
    issuedCertId: string;
    modifiedTime: string;
    modifiedby: string;
    name?: string;
    upgradeAttempt: string;
}

export interface GetZPAServerGroupAppConnectorGroupServerGroup {
    configSpace: string;
    creationTime: string;
    description: string;
    dynamicDiscovery: boolean;
    enabled: boolean;
    id: string;
    modifiedTime: string;
    modifiedby: string;
    name?: string;
}

export interface GetZPAServerGroupApplication {
    id: string;
    name: string;
}

export interface GetZPAServerGroupServer {
    address: string;
    appServerGroupIds: string[];
    configSpace: string;
    creationTime: string;
    description: string;
    enabled: boolean;
    id: string;
    modifiedTime: string;
    modifiedby: string;
    name: string;
}

export interface GetZPAServiceEdgeGroupServiceEdge {
    applicationStartTime: string;
    controlChannelStatus: string;
    creationTime: string;
    ctrlBrokerName: string;
    currentVersion: string;
    description: string;
    enabled: boolean;
    enrollmentCert: {[key: string]: any};
    expectedUpgradeTime: string;
    expectedVersion: string;
    fingerprint: string;
    id: string;
    ipacl: string;
    issuedCertId: string;
    lastBrokerConnectTime: string;
    lastBrokerConnectTimeDuration: string;
    lastBrokerDisconnectTime: string;
    lastBrokerDisconnectTimeDuration: string;
    lastUpgradeTime: string;
    latitude: string;
    listenIps: string;
    location: string;
    longitude: string;
    modifiedTime: string;
    modifiedby: string;
    name: string;
    platform: string;
    previousVersion: string;
    privateIp: string;
    provisioningKeyId: string;
    provisioningKeyName: string;
    publicIp: string;
    publishIps: string;
    sargeVersion: string;
    serviceEdgeGroupId: string;
    serviceEdgeGroupName: string;
    upgradeAttempt: string;
    upgradeStatus: string;
}

export interface GetZPAServiceEdgeGroupTrustedNetwork {
    creationTime: string;
    domain: string;
    id: string;
    masterCustomerId: string;
    modifiedTime: string;
    modifiedby: string;
    name: string;
    networkId: string;
    zscalerCloud: string;
}

export interface ZPAAppSegmentBrowserAccessClientlessApp {
    allowOptions?: boolean;
    appId: string;
    applicationPort: string;
    applicationProtocol: string;
    certificateId: string;
    certificateName: string;
    cname: string;
    description?: string;
    domain?: string;
    enabled: boolean;
    hidden: boolean;
    id: string;
    localDomain?: string;
    name: string;
    path?: string;
    trustUntrustedCert: boolean;
}

export interface ZPAAppSegmentBrowserAccessServerGroup {
    ids: string[];
}

export interface ZPAApplicationSegmentServerGroup {
    ids: string[];
}

export interface ZPALogStreamingServiceConfig {
    auditMessage: string;
    description?: string;
    enabled?: boolean;
    filters?: string[];
    format: string;
    id: string;
    lssHost: string;
    lssPort: string;
    name: string;
    sourceLogType: string;
    useTls?: boolean;
}

export interface ZPALogStreamingServiceConnectorGroup {
    ids?: string[];
}

export interface ZPALogStreamingServicePolicyRuleResource {
    action?: string;
    actionId?: string;
    bypassDefaultRule?: boolean;
    conditions?: outputs.ZPALogStreamingServicePolicyRuleResourceCondition[];
    customMsg?: string;
    defaultRule?: boolean;
    description?: string;
    id: string;
    lssDefaultRule?: boolean;
    name: string;
    operator: string;
    policySetId?: string;
    policyType: string;
    priority: string;
    reauthDefaultRule?: boolean;
    reauthIdleTimeout?: string;
    reauthTimeout?: string;
    ruleOrder: string;
}

export interface ZPALogStreamingServicePolicyRuleResourceCondition {
    negated?: boolean;
    operands?: outputs.ZPALogStreamingServicePolicyRuleResourceConditionOperand[];
    operator: string;
}

export interface ZPALogStreamingServicePolicyRuleResourceConditionOperand {
    objectType: string;
    values?: string[];
}

export interface ZPAPolicyAccessForwardingRuleCondition {
    id: string;
    negated: boolean;
    operands: outputs.ZPAPolicyAccessForwardingRuleConditionOperand[];
    operator: string;
}

export interface ZPAPolicyAccessForwardingRuleConditionOperand {
    id: string;
    idpId: string;
    lhs: string;
    name: string;
    objectType: string;
    rhs?: string;
    rhsLists?: string[];
}

export interface ZPAPolicyAccessRuleAppConnectorGroup {
    ids?: string[];
}

export interface ZPAPolicyAccessRuleAppServerGroup {
    ids?: string[];
}

export interface ZPAPolicyAccessRuleCondition {
    id: string;
    negated: boolean;
    operands: outputs.ZPAPolicyAccessRuleConditionOperand[];
    operator: string;
}

export interface ZPAPolicyAccessRuleConditionOperand {
    id: string;
    idpId: string;
    lhs: string;
    name: string;
    objectType: string;
    rhs?: string;
    rhsLists?: string[];
}

export interface ZPAPolicyAccessTimeoutRuleCondition {
    id: string;
    negated: boolean;
    operands: outputs.ZPAPolicyAccessTimeoutRuleConditionOperand[];
    operator: string;
}

export interface ZPAPolicyAccessTimeoutRuleConditionOperand {
    id: string;
    idpId: string;
    lhs: string;
    name: string;
    objectType: string;
    rhs?: string;
    rhsLists?: string[];
}

export interface ZPASegmentGroupApplication {
    id?: string;
}

export interface ZPAServerGroupAppConnectorGroup {
    ids?: string[];
}

export interface ZPAServerGroupApplication {
    ids?: string[];
}

export interface ZPAServerGroupServer {
    ids?: string[];
}

export interface ZPAServiceEdgeGroupServiceEdge {
    ids?: string[];
}

export interface ZPAServiceEdgeGroupTrustedNetwork {
    ids?: string[];
}

