// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class ZPAApplicationSegment extends pulumi.CustomResource {
    /**
     * Get an existing ZPAApplicationSegment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZPAApplicationSegmentState, opts?: pulumi.CustomResourceOptions): ZPAApplicationSegment {
        return new ZPAApplicationSegment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zpa:index/zPAApplicationSegment:ZPAApplicationSegment';

    /**
     * Returns true if the given object is an instance of ZPAApplicationSegment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ZPAApplicationSegment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZPAApplicationSegment.__pulumiType;
    }

    /**
     * Indicates whether users can bypass ZPA to access applications.
     */
    public readonly bypassType!: pulumi.Output<string>;
    public readonly configSpace!: pulumi.Output<string | undefined>;
    public readonly defaultIdleTimeout!: pulumi.Output<string>;
    /**
     * Description of the application.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * List of domains and IPs.
     */
    public readonly domainNames!: pulumi.Output<string[]>;
    /**
     * Whether Double Encryption is enabled or disabled for the app.
     */
    public readonly doubleEncrypt!: pulumi.Output<boolean | undefined>;
    /**
     * Whether this application is enabled or not.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly healthCheckType!: pulumi.Output<string | undefined>;
    /**
     * Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
     */
    public readonly healthReporting!: pulumi.Output<string | undefined>;
    public readonly icmpAccessType!: pulumi.Output<string | undefined>;
    public readonly ipAnchored!: pulumi.Output<boolean | undefined>;
    /**
     * Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
     * connectors.
     */
    public readonly isCnameEnabled!: pulumi.Output<boolean>;
    /**
     * Name of the application.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly passiveHealthEnabled!: pulumi.Output<boolean>;
    public readonly segmentGroupId!: pulumi.Output<string>;
    public /*out*/ readonly segmentGroupName!: pulumi.Output<string>;
    /**
     * List of the server group IDs.
     */
    public readonly serverGroups!: pulumi.Output<outputs.ZPAApplicationSegmentServerGroup[]>;
    /**
     * TCP port ranges used to access the app.
     */
    public readonly tcpPortRanges!: pulumi.Output<string[]>;
    /**
     * UDP port ranges used to access the app.
     */
    public readonly udpPortRanges!: pulumi.Output<string[]>;

    /**
     * Create a ZPAApplicationSegment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZPAApplicationSegmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZPAApplicationSegmentArgs | ZPAApplicationSegmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZPAApplicationSegmentState | undefined;
            resourceInputs["bypassType"] = state ? state.bypassType : undefined;
            resourceInputs["configSpace"] = state ? state.configSpace : undefined;
            resourceInputs["defaultIdleTimeout"] = state ? state.defaultIdleTimeout : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainNames"] = state ? state.domainNames : undefined;
            resourceInputs["doubleEncrypt"] = state ? state.doubleEncrypt : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["healthCheckType"] = state ? state.healthCheckType : undefined;
            resourceInputs["healthReporting"] = state ? state.healthReporting : undefined;
            resourceInputs["icmpAccessType"] = state ? state.icmpAccessType : undefined;
            resourceInputs["ipAnchored"] = state ? state.ipAnchored : undefined;
            resourceInputs["isCnameEnabled"] = state ? state.isCnameEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["passiveHealthEnabled"] = state ? state.passiveHealthEnabled : undefined;
            resourceInputs["segmentGroupId"] = state ? state.segmentGroupId : undefined;
            resourceInputs["segmentGroupName"] = state ? state.segmentGroupName : undefined;
            resourceInputs["serverGroups"] = state ? state.serverGroups : undefined;
            resourceInputs["tcpPortRanges"] = state ? state.tcpPortRanges : undefined;
            resourceInputs["udpPortRanges"] = state ? state.udpPortRanges : undefined;
        } else {
            const args = argsOrState as ZPAApplicationSegmentArgs | undefined;
            if ((!args || args.domainNames === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainNames'");
            }
            if ((!args || args.serverGroups === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverGroups'");
            }
            resourceInputs["bypassType"] = args ? args.bypassType : undefined;
            resourceInputs["configSpace"] = args ? args.configSpace : undefined;
            resourceInputs["defaultIdleTimeout"] = args ? args.defaultIdleTimeout : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domainNames"] = args ? args.domainNames : undefined;
            resourceInputs["doubleEncrypt"] = args ? args.doubleEncrypt : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["healthCheckType"] = args ? args.healthCheckType : undefined;
            resourceInputs["healthReporting"] = args ? args.healthReporting : undefined;
            resourceInputs["icmpAccessType"] = args ? args.icmpAccessType : undefined;
            resourceInputs["ipAnchored"] = args ? args.ipAnchored : undefined;
            resourceInputs["isCnameEnabled"] = args ? args.isCnameEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["passiveHealthEnabled"] = args ? args.passiveHealthEnabled : undefined;
            resourceInputs["segmentGroupId"] = args ? args.segmentGroupId : undefined;
            resourceInputs["serverGroups"] = args ? args.serverGroups : undefined;
            resourceInputs["tcpPortRanges"] = args ? args.tcpPortRanges : undefined;
            resourceInputs["udpPortRanges"] = args ? args.udpPortRanges : undefined;
            resourceInputs["segmentGroupName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ZPAApplicationSegment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ZPAApplicationSegment resources.
 */
export interface ZPAApplicationSegmentState {
    /**
     * Indicates whether users can bypass ZPA to access applications.
     */
    bypassType?: pulumi.Input<string>;
    configSpace?: pulumi.Input<string>;
    defaultIdleTimeout?: pulumi.Input<string>;
    /**
     * Description of the application.
     */
    description?: pulumi.Input<string>;
    /**
     * List of domains and IPs.
     */
    domainNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether Double Encryption is enabled or disabled for the app.
     */
    doubleEncrypt?: pulumi.Input<boolean>;
    /**
     * Whether this application is enabled or not.
     */
    enabled?: pulumi.Input<boolean>;
    healthCheckType?: pulumi.Input<string>;
    /**
     * Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
     */
    healthReporting?: pulumi.Input<string>;
    icmpAccessType?: pulumi.Input<string>;
    ipAnchored?: pulumi.Input<boolean>;
    /**
     * Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
     * connectors.
     */
    isCnameEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the application.
     */
    name?: pulumi.Input<string>;
    passiveHealthEnabled?: pulumi.Input<boolean>;
    segmentGroupId?: pulumi.Input<string>;
    segmentGroupName?: pulumi.Input<string>;
    /**
     * List of the server group IDs.
     */
    serverGroups?: pulumi.Input<pulumi.Input<inputs.ZPAApplicationSegmentServerGroup>[]>;
    /**
     * TCP port ranges used to access the app.
     */
    tcpPortRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * UDP port ranges used to access the app.
     */
    udpPortRanges?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ZPAApplicationSegment resource.
 */
export interface ZPAApplicationSegmentArgs {
    /**
     * Indicates whether users can bypass ZPA to access applications.
     */
    bypassType?: pulumi.Input<string>;
    configSpace?: pulumi.Input<string>;
    defaultIdleTimeout?: pulumi.Input<string>;
    /**
     * Description of the application.
     */
    description?: pulumi.Input<string>;
    /**
     * List of domains and IPs.
     */
    domainNames: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether Double Encryption is enabled or disabled for the app.
     */
    doubleEncrypt?: pulumi.Input<boolean>;
    /**
     * Whether this application is enabled or not.
     */
    enabled?: pulumi.Input<boolean>;
    healthCheckType?: pulumi.Input<string>;
    /**
     * Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
     */
    healthReporting?: pulumi.Input<string>;
    icmpAccessType?: pulumi.Input<string>;
    ipAnchored?: pulumi.Input<boolean>;
    /**
     * Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
     * connectors.
     */
    isCnameEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the application.
     */
    name?: pulumi.Input<string>;
    passiveHealthEnabled?: pulumi.Input<boolean>;
    segmentGroupId?: pulumi.Input<string>;
    /**
     * List of the server group IDs.
     */
    serverGroups: pulumi.Input<pulumi.Input<inputs.ZPAApplicationSegmentServerGroup>[]>;
    /**
     * TCP port ranges used to access the app.
     */
    tcpPortRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * UDP port ranges used to access the app.
     */
    udpPortRanges?: pulumi.Input<pulumi.Input<string>[]>;
}
