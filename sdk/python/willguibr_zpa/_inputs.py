# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ZPAAppSegmentBrowserAccessClientlessAppArgs',
    'ZPAAppSegmentBrowserAccessServerGroupArgs',
    'ZPAApplicationSegmentServerGroupArgs',
    'ZPALogStreamingServiceConfigArgs',
    'ZPALogStreamingServiceConnectorGroupArgs',
    'ZPALogStreamingServicePolicyRuleResourceArgs',
    'ZPALogStreamingServicePolicyRuleResourceConditionArgs',
    'ZPALogStreamingServicePolicyRuleResourceConditionOperandArgs',
    'ZPAPolicyAccessForwardingRuleConditionArgs',
    'ZPAPolicyAccessForwardingRuleConditionOperandArgs',
    'ZPAPolicyAccessRuleAppConnectorGroupArgs',
    'ZPAPolicyAccessRuleAppServerGroupArgs',
    'ZPAPolicyAccessRuleConditionArgs',
    'ZPAPolicyAccessRuleConditionOperandArgs',
    'ZPAPolicyAccessTimeoutRuleConditionArgs',
    'ZPAPolicyAccessTimeoutRuleConditionOperandArgs',
    'ZPASegmentGroupApplicationArgs',
    'ZPAServerGroupAppConnectorGroupArgs',
    'ZPAServerGroupApplicationArgs',
    'ZPAServerGroupServerArgs',
    'ZPAServiceEdgeGroupServiceEdgeArgs',
    'ZPAServiceEdgeGroupTrustedNetworkArgs',
    'GetZPAAppSegmentBrowserAccessTcpPortRangeArgs',
    'GetZPAAppSegmentBrowserAccessUdpPortRangeArgs',
    'GetZPAApplicationSegmentTcpPortRangeArgs',
    'GetZPAApplicationSegmentUdpPortRangeArgs',
    'GetZPALogStreamingServiceConfigArgs',
]

@pulumi.input_type
class ZPAAppSegmentBrowserAccessClientlessAppArgs:
    def __init__(__self__, *,
                 application_protocol: pulumi.Input[str],
                 certificate_id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 allow_options: Optional[pulumi.Input[bool]] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 application_port: Optional[pulumi.Input[str]] = None,
                 certificate_name: Optional[pulumi.Input[str]] = None,
                 cname: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 hidden: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 local_domain: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 trust_untrusted_cert: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "application_protocol", application_protocol)
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "name", name)
        if allow_options is not None:
            pulumi.set(__self__, "allow_options", allow_options)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if application_port is not None:
            pulumi.set(__self__, "application_port", application_port)
        if certificate_name is not None:
            pulumi.set(__self__, "certificate_name", certificate_name)
        if cname is not None:
            pulumi.set(__self__, "cname", cname)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if local_domain is not None:
            pulumi.set(__self__, "local_domain", local_domain)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if trust_untrusted_cert is not None:
            pulumi.set(__self__, "trust_untrusted_cert", trust_untrusted_cert)

    @property
    @pulumi.getter(name="applicationProtocol")
    def application_protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "application_protocol")

    @application_protocol.setter
    def application_protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_protocol", value)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="allowOptions")
    def allow_options(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_options")

    @allow_options.setter
    def allow_options(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_options", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="applicationPort")
    def application_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_port")

    @application_port.setter
    def application_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_port", value)

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_name")

    @certificate_name.setter
    def certificate_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_name", value)

    @property
    @pulumi.getter
    def cname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cname")

    @cname.setter
    def cname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="localDomain")
    def local_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_domain")

    @local_domain.setter
    def local_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_domain", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="trustUntrustedCert")
    def trust_untrusted_cert(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "trust_untrusted_cert")

    @trust_untrusted_cert.setter
    def trust_untrusted_cert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trust_untrusted_cert", value)


@pulumi.input_type
class ZPAAppSegmentBrowserAccessServerGroupArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ZPAApplicationSegmentServerGroupArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ZPALogStreamingServiceConfigArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 lss_host: pulumi.Input[str],
                 lss_port: pulumi.Input[str],
                 name: pulumi.Input[str],
                 source_log_type: pulumi.Input[str],
                 audit_message: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 use_tls: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "lss_host", lss_host)
        pulumi.set(__self__, "lss_port", lss_port)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_log_type", source_log_type)
        if audit_message is not None:
            pulumi.set(__self__, "audit_message", audit_message)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if use_tls is not None:
            pulumi.set(__self__, "use_tls", use_tls)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="lssHost")
    def lss_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "lss_host")

    @lss_host.setter
    def lss_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "lss_host", value)

    @property
    @pulumi.getter(name="lssPort")
    def lss_port(self) -> pulumi.Input[str]:
        return pulumi.get(self, "lss_port")

    @lss_port.setter
    def lss_port(self, value: pulumi.Input[str]):
        pulumi.set(self, "lss_port", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sourceLogType")
    def source_log_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_log_type")

    @source_log_type.setter
    def source_log_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_log_type", value)

    @property
    @pulumi.getter(name="auditMessage")
    def audit_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "audit_message")

    @audit_message.setter
    def audit_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audit_message", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="useTls")
    def use_tls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_tls")

    @use_tls.setter
    def use_tls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_tls", value)


@pulumi.input_type
class ZPALogStreamingServiceConnectorGroupArgs:
    def __init__(__self__, *,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ZPALogStreamingServicePolicyRuleResourceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 action: Optional[pulumi.Input[str]] = None,
                 action_id: Optional[pulumi.Input[str]] = None,
                 bypass_default_rule: Optional[pulumi.Input[bool]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ZPALogStreamingServicePolicyRuleResourceConditionArgs']]]] = None,
                 custom_msg: Optional[pulumi.Input[str]] = None,
                 default_rule: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 lss_default_rule: Optional[pulumi.Input[bool]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 policy_set_id: Optional[pulumi.Input[str]] = None,
                 policy_type: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 reauth_default_rule: Optional[pulumi.Input[bool]] = None,
                 reauth_idle_timeout: Optional[pulumi.Input[str]] = None,
                 reauth_timeout: Optional[pulumi.Input[str]] = None,
                 rule_order: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if action_id is not None:
            pulumi.set(__self__, "action_id", action_id)
        if bypass_default_rule is not None:
            pulumi.set(__self__, "bypass_default_rule", bypass_default_rule)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if custom_msg is not None:
            pulumi.set(__self__, "custom_msg", custom_msg)
        if default_rule is not None:
            pulumi.set(__self__, "default_rule", default_rule)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lss_default_rule is not None:
            pulumi.set(__self__, "lss_default_rule", lss_default_rule)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if policy_set_id is not None:
            pulumi.set(__self__, "policy_set_id", policy_set_id)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if reauth_default_rule is not None:
            pulumi.set(__self__, "reauth_default_rule", reauth_default_rule)
        if reauth_idle_timeout is not None:
            pulumi.set(__self__, "reauth_idle_timeout", reauth_idle_timeout)
        if reauth_timeout is not None:
            pulumi.set(__self__, "reauth_timeout", reauth_timeout)
        if rule_order is not None:
            pulumi.set(__self__, "rule_order", rule_order)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="actionId")
    def action_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action_id")

    @action_id.setter
    def action_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_id", value)

    @property
    @pulumi.getter(name="bypassDefaultRule")
    def bypass_default_rule(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "bypass_default_rule")

    @bypass_default_rule.setter
    def bypass_default_rule(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bypass_default_rule", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZPALogStreamingServicePolicyRuleResourceConditionArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZPALogStreamingServicePolicyRuleResourceConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="customMsg")
    def custom_msg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_msg")

    @custom_msg.setter
    def custom_msg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_msg", value)

    @property
    @pulumi.getter(name="defaultRule")
    def default_rule(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "default_rule")

    @default_rule.setter
    def default_rule(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_rule", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="lssDefaultRule")
    def lss_default_rule(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "lss_default_rule")

    @lss_default_rule.setter
    def lss_default_rule(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "lss_default_rule", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="policySetId")
    def policy_set_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_set_id")

    @policy_set_id.setter
    def policy_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_set_id", value)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_type", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="reauthDefaultRule")
    def reauth_default_rule(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "reauth_default_rule")

    @reauth_default_rule.setter
    def reauth_default_rule(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reauth_default_rule", value)

    @property
    @pulumi.getter(name="reauthIdleTimeout")
    def reauth_idle_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reauth_idle_timeout")

    @reauth_idle_timeout.setter
    def reauth_idle_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reauth_idle_timeout", value)

    @property
    @pulumi.getter(name="reauthTimeout")
    def reauth_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reauth_timeout")

    @reauth_timeout.setter
    def reauth_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reauth_timeout", value)

    @property
    @pulumi.getter(name="ruleOrder")
    def rule_order(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rule_order")

    @rule_order.setter
    def rule_order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_order", value)


@pulumi.input_type
class ZPALogStreamingServicePolicyRuleResourceConditionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negated: Optional[pulumi.Input[bool]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['ZPALogStreamingServicePolicyRuleResourceConditionOperandArgs']]]] = None):
        pulumi.set(__self__, "operator", operator)
        if negated is not None:
            pulumi.set(__self__, "negated", negated)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negated(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negated")

    @negated.setter
    def negated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negated", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZPALogStreamingServicePolicyRuleResourceConditionOperandArgs']]]]:
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZPALogStreamingServicePolicyRuleResourceConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)


@pulumi.input_type
class ZPALogStreamingServicePolicyRuleResourceConditionOperandArgs:
    def __init__(__self__, *,
                 object_type: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "object_type", object_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ZPAPolicyAccessForwardingRuleConditionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None,
                 negated: Optional[pulumi.Input[bool]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['ZPAPolicyAccessForwardingRuleConditionOperandArgs']]]] = None):
        pulumi.set(__self__, "operator", operator)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if negated is not None:
            pulumi.set(__self__, "negated", negated)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def negated(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negated")

    @negated.setter
    def negated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negated", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZPAPolicyAccessForwardingRuleConditionOperandArgs']]]]:
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZPAPolicyAccessForwardingRuleConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)


@pulumi.input_type
class ZPAPolicyAccessForwardingRuleConditionOperandArgs:
    def __init__(__self__, *,
                 lhs: pulumi.Input[str],
                 object_type: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None,
                 idp_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rhs: Optional[pulumi.Input[str]] = None,
                 rhs_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "lhs", lhs)
        pulumi.set(__self__, "object_type", object_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idp_id is not None:
            pulumi.set(__self__, "idp_id", idp_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)
        if rhs_lists is not None:
            pulumi.set(__self__, "rhs_lists", rhs_lists)

    @property
    @pulumi.getter
    def lhs(self) -> pulumi.Input[str]:
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: pulumi.Input[str]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idp_id")

    @idp_id.setter
    def idp_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rhs", value)

    @property
    @pulumi.getter(name="rhsLists")
    def rhs_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "rhs_lists")

    @rhs_lists.setter
    def rhs_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "rhs_lists", value)


@pulumi.input_type
class ZPAPolicyAccessRuleAppConnectorGroupArgs:
    def __init__(__self__, *,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ZPAPolicyAccessRuleAppServerGroupArgs:
    def __init__(__self__, *,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ZPAPolicyAccessRuleConditionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None,
                 negated: Optional[pulumi.Input[bool]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['ZPAPolicyAccessRuleConditionOperandArgs']]]] = None):
        pulumi.set(__self__, "operator", operator)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if negated is not None:
            pulumi.set(__self__, "negated", negated)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def negated(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negated")

    @negated.setter
    def negated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negated", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZPAPolicyAccessRuleConditionOperandArgs']]]]:
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZPAPolicyAccessRuleConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)


@pulumi.input_type
class ZPAPolicyAccessRuleConditionOperandArgs:
    def __init__(__self__, *,
                 lhs: pulumi.Input[str],
                 object_type: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None,
                 idp_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rhs: Optional[pulumi.Input[str]] = None,
                 rhs_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "lhs", lhs)
        pulumi.set(__self__, "object_type", object_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idp_id is not None:
            pulumi.set(__self__, "idp_id", idp_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)
        if rhs_lists is not None:
            pulumi.set(__self__, "rhs_lists", rhs_lists)

    @property
    @pulumi.getter
    def lhs(self) -> pulumi.Input[str]:
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: pulumi.Input[str]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idp_id")

    @idp_id.setter
    def idp_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rhs", value)

    @property
    @pulumi.getter(name="rhsLists")
    def rhs_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "rhs_lists")

    @rhs_lists.setter
    def rhs_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "rhs_lists", value)


@pulumi.input_type
class ZPAPolicyAccessTimeoutRuleConditionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None,
                 negated: Optional[pulumi.Input[bool]] = None,
                 operands: Optional[pulumi.Input[Sequence[pulumi.Input['ZPAPolicyAccessTimeoutRuleConditionOperandArgs']]]] = None):
        pulumi.set(__self__, "operator", operator)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if negated is not None:
            pulumi.set(__self__, "negated", negated)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def negated(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negated")

    @negated.setter
    def negated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negated", value)

    @property
    @pulumi.getter
    def operands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZPAPolicyAccessTimeoutRuleConditionOperandArgs']]]]:
        return pulumi.get(self, "operands")

    @operands.setter
    def operands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZPAPolicyAccessTimeoutRuleConditionOperandArgs']]]]):
        pulumi.set(self, "operands", value)


@pulumi.input_type
class ZPAPolicyAccessTimeoutRuleConditionOperandArgs:
    def __init__(__self__, *,
                 lhs: pulumi.Input[str],
                 object_type: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None,
                 idp_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rhs: Optional[pulumi.Input[str]] = None,
                 rhs_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "lhs", lhs)
        pulumi.set(__self__, "object_type", object_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idp_id is not None:
            pulumi.set(__self__, "idp_id", idp_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)
        if rhs_lists is not None:
            pulumi.set(__self__, "rhs_lists", rhs_lists)

    @property
    @pulumi.getter
    def lhs(self) -> pulumi.Input[str]:
        return pulumi.get(self, "lhs")

    @lhs.setter
    def lhs(self, value: pulumi.Input[str]):
        pulumi.set(self, "lhs", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idp_id")

    @idp_id.setter
    def idp_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def rhs(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rhs")

    @rhs.setter
    def rhs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rhs", value)

    @property
    @pulumi.getter(name="rhsLists")
    def rhs_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "rhs_lists")

    @rhs_lists.setter
    def rhs_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "rhs_lists", value)


@pulumi.input_type
class ZPASegmentGroupApplicationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ZPAServerGroupAppConnectorGroupArgs:
    def __init__(__self__, *,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ZPAServerGroupApplicationArgs:
    def __init__(__self__, *,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ZPAServerGroupServerArgs:
    def __init__(__self__, *,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ZPAServiceEdgeGroupServiceEdgeArgs:
    def __init__(__self__, *,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ZPAServiceEdgeGroupTrustedNetworkArgs:
    def __init__(__self__, *,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class GetZPAAppSegmentBrowserAccessTcpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[str]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class GetZPAAppSegmentBrowserAccessUdpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[str]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class GetZPAApplicationSegmentTcpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[str]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class GetZPAApplicationSegmentUdpPortRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[str] = None,
                 to: Optional[str] = None):
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[str]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[str]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class GetZPALogStreamingServiceConfigArgs:
    def __init__(__self__, *,
                 audit_message: str,
                 description: str,
                 enabled: bool,
                 filters: Sequence[str],
                 format: str,
                 id: str,
                 lss_host: str,
                 lss_port: str,
                 name: str,
                 source_log_type: str,
                 use_tls: bool):
        pulumi.set(__self__, "audit_message", audit_message)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lss_host", lss_host)
        pulumi.set(__self__, "lss_port", lss_port)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_log_type", source_log_type)
        pulumi.set(__self__, "use_tls", use_tls)

    @property
    @pulumi.getter(name="auditMessage")
    def audit_message(self) -> str:
        return pulumi.get(self, "audit_message")

    @audit_message.setter
    def audit_message(self, value: str):
        pulumi.set(self, "audit_message", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: bool):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def filters(self) -> Sequence[str]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Sequence[str]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: str):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="lssHost")
    def lss_host(self) -> str:
        return pulumi.get(self, "lss_host")

    @lss_host.setter
    def lss_host(self, value: str):
        pulumi.set(self, "lss_host", value)

    @property
    @pulumi.getter(name="lssPort")
    def lss_port(self) -> str:
        return pulumi.get(self, "lss_port")

    @lss_port.setter
    def lss_port(self, value: str):
        pulumi.set(self, "lss_port", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sourceLogType")
    def source_log_type(self) -> str:
        return pulumi.get(self, "source_log_type")

    @source_log_type.setter
    def source_log_type(self, value: str):
        pulumi.set(self, "source_log_type", value)

    @property
    @pulumi.getter(name="useTls")
    def use_tls(self) -> bool:
        return pulumi.get(self, "use_tls")

    @use_tls.setter
    def use_tls(self, value: bool):
        pulumi.set(self, "use_tls", value)


