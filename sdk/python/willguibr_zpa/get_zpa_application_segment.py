# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetZPAApplicationSegmentResult',
    'AwaitableGetZPAApplicationSegmentResult',
    'get_zpa_application_segment',
    'get_zpa_application_segment_output',
]

@pulumi.output_type
class GetZPAApplicationSegmentResult:
    """
    A collection of values returned by getZPAApplicationSegment.
    """
    def __init__(__self__, bypass_type=None, config_space=None, creation_time=None, default_idle_timeout=None, default_max_age=None, description=None, domain_names=None, double_encrypt=None, enabled=None, health_checktype=None, health_reporting=None, id=None, ip_anchored=None, is_cname_enabled=None, modified_time=None, modifiedby=None, name=None, passive_health_enabled=None, segment_group_id=None, segment_group_name=None, server_groups=None, tcp_port_ranges=None, udp_port_ranges=None):
        if bypass_type and not isinstance(bypass_type, str):
            raise TypeError("Expected argument 'bypass_type' to be a str")
        pulumi.set(__self__, "bypass_type", bypass_type)
        if config_space and not isinstance(config_space, str):
            raise TypeError("Expected argument 'config_space' to be a str")
        pulumi.set(__self__, "config_space", config_space)
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        pulumi.set(__self__, "creation_time", creation_time)
        if default_idle_timeout and not isinstance(default_idle_timeout, str):
            raise TypeError("Expected argument 'default_idle_timeout' to be a str")
        pulumi.set(__self__, "default_idle_timeout", default_idle_timeout)
        if default_max_age and not isinstance(default_max_age, str):
            raise TypeError("Expected argument 'default_max_age' to be a str")
        pulumi.set(__self__, "default_max_age", default_max_age)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if domain_names and not isinstance(domain_names, list):
            raise TypeError("Expected argument 'domain_names' to be a list")
        pulumi.set(__self__, "domain_names", domain_names)
        if double_encrypt and not isinstance(double_encrypt, bool):
            raise TypeError("Expected argument 'double_encrypt' to be a bool")
        pulumi.set(__self__, "double_encrypt", double_encrypt)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if health_checktype and not isinstance(health_checktype, str):
            raise TypeError("Expected argument 'health_checktype' to be a str")
        pulumi.set(__self__, "health_checktype", health_checktype)
        if health_reporting and not isinstance(health_reporting, str):
            raise TypeError("Expected argument 'health_reporting' to be a str")
        pulumi.set(__self__, "health_reporting", health_reporting)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_anchored and not isinstance(ip_anchored, bool):
            raise TypeError("Expected argument 'ip_anchored' to be a bool")
        pulumi.set(__self__, "ip_anchored", ip_anchored)
        if is_cname_enabled and not isinstance(is_cname_enabled, bool):
            raise TypeError("Expected argument 'is_cname_enabled' to be a bool")
        pulumi.set(__self__, "is_cname_enabled", is_cname_enabled)
        if modified_time and not isinstance(modified_time, str):
            raise TypeError("Expected argument 'modified_time' to be a str")
        pulumi.set(__self__, "modified_time", modified_time)
        if modifiedby and not isinstance(modifiedby, str):
            raise TypeError("Expected argument 'modifiedby' to be a str")
        pulumi.set(__self__, "modifiedby", modifiedby)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if passive_health_enabled and not isinstance(passive_health_enabled, bool):
            raise TypeError("Expected argument 'passive_health_enabled' to be a bool")
        pulumi.set(__self__, "passive_health_enabled", passive_health_enabled)
        if segment_group_id and not isinstance(segment_group_id, str):
            raise TypeError("Expected argument 'segment_group_id' to be a str")
        pulumi.set(__self__, "segment_group_id", segment_group_id)
        if segment_group_name and not isinstance(segment_group_name, str):
            raise TypeError("Expected argument 'segment_group_name' to be a str")
        pulumi.set(__self__, "segment_group_name", segment_group_name)
        if server_groups and not isinstance(server_groups, list):
            raise TypeError("Expected argument 'server_groups' to be a list")
        pulumi.set(__self__, "server_groups", server_groups)
        if tcp_port_ranges and not isinstance(tcp_port_ranges, list):
            raise TypeError("Expected argument 'tcp_port_ranges' to be a list")
        pulumi.set(__self__, "tcp_port_ranges", tcp_port_ranges)
        if udp_port_ranges and not isinstance(udp_port_ranges, list):
            raise TypeError("Expected argument 'udp_port_ranges' to be a list")
        pulumi.set(__self__, "udp_port_ranges", udp_port_ranges)

    @property
    @pulumi.getter(name="bypassType")
    def bypass_type(self) -> str:
        return pulumi.get(self, "bypass_type")

    @property
    @pulumi.getter(name="configSpace")
    def config_space(self) -> str:
        return pulumi.get(self, "config_space")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="defaultIdleTimeout")
    def default_idle_timeout(self) -> str:
        return pulumi.get(self, "default_idle_timeout")

    @property
    @pulumi.getter(name="defaultMaxAge")
    def default_max_age(self) -> str:
        return pulumi.get(self, "default_max_age")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainNames")
    def domain_names(self) -> Sequence[str]:
        return pulumi.get(self, "domain_names")

    @property
    @pulumi.getter(name="doubleEncrypt")
    def double_encrypt(self) -> bool:
        return pulumi.get(self, "double_encrypt")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="healthChecktype")
    def health_checktype(self) -> str:
        return pulumi.get(self, "health_checktype")

    @property
    @pulumi.getter(name="healthReporting")
    def health_reporting(self) -> str:
        return pulumi.get(self, "health_reporting")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAnchored")
    def ip_anchored(self) -> bool:
        return pulumi.get(self, "ip_anchored")

    @property
    @pulumi.getter(name="isCnameEnabled")
    def is_cname_enabled(self) -> bool:
        return pulumi.get(self, "is_cname_enabled")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="passiveHealthEnabled")
    def passive_health_enabled(self) -> bool:
        return pulumi.get(self, "passive_health_enabled")

    @property
    @pulumi.getter(name="segmentGroupId")
    def segment_group_id(self) -> str:
        return pulumi.get(self, "segment_group_id")

    @property
    @pulumi.getter(name="segmentGroupName")
    def segment_group_name(self) -> str:
        return pulumi.get(self, "segment_group_name")

    @property
    @pulumi.getter(name="serverGroups")
    def server_groups(self) -> Sequence['outputs.GetZPAApplicationSegmentServerGroupResult']:
        return pulumi.get(self, "server_groups")

    @property
    @pulumi.getter(name="tcpPortRanges")
    def tcp_port_ranges(self) -> Sequence[str]:
        return pulumi.get(self, "tcp_port_ranges")

    @property
    @pulumi.getter(name="udpPortRanges")
    def udp_port_ranges(self) -> Sequence[str]:
        return pulumi.get(self, "udp_port_ranges")


class AwaitableGetZPAApplicationSegmentResult(GetZPAApplicationSegmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetZPAApplicationSegmentResult(
            bypass_type=self.bypass_type,
            config_space=self.config_space,
            creation_time=self.creation_time,
            default_idle_timeout=self.default_idle_timeout,
            default_max_age=self.default_max_age,
            description=self.description,
            domain_names=self.domain_names,
            double_encrypt=self.double_encrypt,
            enabled=self.enabled,
            health_checktype=self.health_checktype,
            health_reporting=self.health_reporting,
            id=self.id,
            ip_anchored=self.ip_anchored,
            is_cname_enabled=self.is_cname_enabled,
            modified_time=self.modified_time,
            modifiedby=self.modifiedby,
            name=self.name,
            passive_health_enabled=self.passive_health_enabled,
            segment_group_id=self.segment_group_id,
            segment_group_name=self.segment_group_name,
            server_groups=self.server_groups,
            tcp_port_ranges=self.tcp_port_ranges,
            udp_port_ranges=self.udp_port_ranges)


def get_zpa_application_segment(id: Optional[str] = None,
                                name: Optional[str] = None,
                                tcp_port_ranges: Optional[Sequence[pulumi.InputType['GetZPAApplicationSegmentTcpPortRangeArgs']]] = None,
                                udp_port_ranges: Optional[Sequence[pulumi.InputType['GetZPAApplicationSegmentUdpPortRangeArgs']]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetZPAApplicationSegmentResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['tcpPortRanges'] = tcp_port_ranges
    __args__['udpPortRanges'] = udp_port_ranges
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('zpa:index/getZPAApplicationSegment:getZPAApplicationSegment', __args__, opts=opts, typ=GetZPAApplicationSegmentResult).value

    return AwaitableGetZPAApplicationSegmentResult(
        bypass_type=__ret__.bypass_type,
        config_space=__ret__.config_space,
        creation_time=__ret__.creation_time,
        default_idle_timeout=__ret__.default_idle_timeout,
        default_max_age=__ret__.default_max_age,
        description=__ret__.description,
        domain_names=__ret__.domain_names,
        double_encrypt=__ret__.double_encrypt,
        enabled=__ret__.enabled,
        health_checktype=__ret__.health_checktype,
        health_reporting=__ret__.health_reporting,
        id=__ret__.id,
        ip_anchored=__ret__.ip_anchored,
        is_cname_enabled=__ret__.is_cname_enabled,
        modified_time=__ret__.modified_time,
        modifiedby=__ret__.modifiedby,
        name=__ret__.name,
        passive_health_enabled=__ret__.passive_health_enabled,
        segment_group_id=__ret__.segment_group_id,
        segment_group_name=__ret__.segment_group_name,
        server_groups=__ret__.server_groups,
        tcp_port_ranges=__ret__.tcp_port_ranges,
        udp_port_ranges=__ret__.udp_port_ranges)


@_utilities.lift_output_func(get_zpa_application_segment)
def get_zpa_application_segment_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                                       name: Optional[pulumi.Input[Optional[str]]] = None,
                                       tcp_port_ranges: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetZPAApplicationSegmentTcpPortRangeArgs']]]]] = None,
                                       udp_port_ranges: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetZPAApplicationSegmentUdpPortRangeArgs']]]]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetZPAApplicationSegmentResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
