# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetZPACustomerVersionProfileResult',
    'AwaitableGetZPACustomerVersionProfileResult',
    'get_zpa_customer_version_profile',
    'get_zpa_customer_version_profile_output',
]

@pulumi.output_type
class GetZPACustomerVersionProfileResult:
    """
    A collection of values returned by getZPACustomerVersionProfile.
    """
    def __init__(__self__, creation_time=None, custom_scope_customer_ids=None, customer_id=None, description=None, id=None, modified_time=None, modifiedby=None, name=None, upgrade_priority=None, versions=None, visibility_scope=None):
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        pulumi.set(__self__, "creation_time", creation_time)
        if custom_scope_customer_ids and not isinstance(custom_scope_customer_ids, list):
            raise TypeError("Expected argument 'custom_scope_customer_ids' to be a list")
        pulumi.set(__self__, "custom_scope_customer_ids", custom_scope_customer_ids)
        if customer_id and not isinstance(customer_id, str):
            raise TypeError("Expected argument 'customer_id' to be a str")
        pulumi.set(__self__, "customer_id", customer_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if modified_time and not isinstance(modified_time, str):
            raise TypeError("Expected argument 'modified_time' to be a str")
        pulumi.set(__self__, "modified_time", modified_time)
        if modifiedby and not isinstance(modifiedby, str):
            raise TypeError("Expected argument 'modifiedby' to be a str")
        pulumi.set(__self__, "modifiedby", modifiedby)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if upgrade_priority and not isinstance(upgrade_priority, str):
            raise TypeError("Expected argument 'upgrade_priority' to be a str")
        pulumi.set(__self__, "upgrade_priority", upgrade_priority)
        if versions and not isinstance(versions, list):
            raise TypeError("Expected argument 'versions' to be a list")
        pulumi.set(__self__, "versions", versions)
        if visibility_scope and not isinstance(visibility_scope, str):
            raise TypeError("Expected argument 'visibility_scope' to be a str")
        pulumi.set(__self__, "visibility_scope", visibility_scope)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="customScopeCustomerIds")
    def custom_scope_customer_ids(self) -> Sequence['outputs.GetZPACustomerVersionProfileCustomScopeCustomerIdResult']:
        return pulumi.get(self, "custom_scope_customer_ids")

    @property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> str:
        return pulumi.get(self, "customer_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="upgradePriority")
    def upgrade_priority(self) -> str:
        return pulumi.get(self, "upgrade_priority")

    @property
    @pulumi.getter
    def versions(self) -> Sequence['outputs.GetZPACustomerVersionProfileVersionResult']:
        return pulumi.get(self, "versions")

    @property
    @pulumi.getter(name="visibilityScope")
    def visibility_scope(self) -> str:
        return pulumi.get(self, "visibility_scope")


class AwaitableGetZPACustomerVersionProfileResult(GetZPACustomerVersionProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetZPACustomerVersionProfileResult(
            creation_time=self.creation_time,
            custom_scope_customer_ids=self.custom_scope_customer_ids,
            customer_id=self.customer_id,
            description=self.description,
            id=self.id,
            modified_time=self.modified_time,
            modifiedby=self.modifiedby,
            name=self.name,
            upgrade_priority=self.upgrade_priority,
            versions=self.versions,
            visibility_scope=self.visibility_scope)


def get_zpa_customer_version_profile(name: Optional[str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetZPACustomerVersionProfileResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('zpa:index/getZPACustomerVersionProfile:getZPACustomerVersionProfile', __args__, opts=opts, typ=GetZPACustomerVersionProfileResult).value

    return AwaitableGetZPACustomerVersionProfileResult(
        creation_time=__ret__.creation_time,
        custom_scope_customer_ids=__ret__.custom_scope_customer_ids,
        customer_id=__ret__.customer_id,
        description=__ret__.description,
        id=__ret__.id,
        modified_time=__ret__.modified_time,
        modifiedby=__ret__.modifiedby,
        name=__ret__.name,
        upgrade_priority=__ret__.upgrade_priority,
        versions=__ret__.versions,
        visibility_scope=__ret__.visibility_scope)


@_utilities.lift_output_func(get_zpa_customer_version_profile)
def get_zpa_customer_version_profile_output(name: Optional[pulumi.Input[str]] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetZPACustomerVersionProfileResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
