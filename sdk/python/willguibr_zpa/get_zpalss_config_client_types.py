# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetZPALSSConfigClientTypesResult',
    'AwaitableGetZPALSSConfigClientTypesResult',
    'get_zpalss_config_client_types',
]

@pulumi.output_type
class GetZPALSSConfigClientTypesResult:
    """
    A collection of values returned by getZPALSSConfigClientTypes.
    """
    def __init__(__self__, id=None, zpn_client_type_edge_connector=None, zpn_client_type_exporter=None, zpn_client_type_ip_anchoring=None, zpn_client_type_machine_tunnel=None, zpn_client_type_slogger=None, zpn_client_type_zapp=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if zpn_client_type_edge_connector and not isinstance(zpn_client_type_edge_connector, str):
            raise TypeError("Expected argument 'zpn_client_type_edge_connector' to be a str")
        pulumi.set(__self__, "zpn_client_type_edge_connector", zpn_client_type_edge_connector)
        if zpn_client_type_exporter and not isinstance(zpn_client_type_exporter, str):
            raise TypeError("Expected argument 'zpn_client_type_exporter' to be a str")
        pulumi.set(__self__, "zpn_client_type_exporter", zpn_client_type_exporter)
        if zpn_client_type_ip_anchoring and not isinstance(zpn_client_type_ip_anchoring, str):
            raise TypeError("Expected argument 'zpn_client_type_ip_anchoring' to be a str")
        pulumi.set(__self__, "zpn_client_type_ip_anchoring", zpn_client_type_ip_anchoring)
        if zpn_client_type_machine_tunnel and not isinstance(zpn_client_type_machine_tunnel, str):
            raise TypeError("Expected argument 'zpn_client_type_machine_tunnel' to be a str")
        pulumi.set(__self__, "zpn_client_type_machine_tunnel", zpn_client_type_machine_tunnel)
        if zpn_client_type_slogger and not isinstance(zpn_client_type_slogger, str):
            raise TypeError("Expected argument 'zpn_client_type_slogger' to be a str")
        pulumi.set(__self__, "zpn_client_type_slogger", zpn_client_type_slogger)
        if zpn_client_type_zapp and not isinstance(zpn_client_type_zapp, str):
            raise TypeError("Expected argument 'zpn_client_type_zapp' to be a str")
        pulumi.set(__self__, "zpn_client_type_zapp", zpn_client_type_zapp)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="zpnClientTypeEdgeConnector")
    def zpn_client_type_edge_connector(self) -> str:
        return pulumi.get(self, "zpn_client_type_edge_connector")

    @property
    @pulumi.getter(name="zpnClientTypeExporter")
    def zpn_client_type_exporter(self) -> str:
        return pulumi.get(self, "zpn_client_type_exporter")

    @property
    @pulumi.getter(name="zpnClientTypeIpAnchoring")
    def zpn_client_type_ip_anchoring(self) -> str:
        return pulumi.get(self, "zpn_client_type_ip_anchoring")

    @property
    @pulumi.getter(name="zpnClientTypeMachineTunnel")
    def zpn_client_type_machine_tunnel(self) -> str:
        return pulumi.get(self, "zpn_client_type_machine_tunnel")

    @property
    @pulumi.getter(name="zpnClientTypeSlogger")
    def zpn_client_type_slogger(self) -> str:
        return pulumi.get(self, "zpn_client_type_slogger")

    @property
    @pulumi.getter(name="zpnClientTypeZapp")
    def zpn_client_type_zapp(self) -> str:
        return pulumi.get(self, "zpn_client_type_zapp")


class AwaitableGetZPALSSConfigClientTypesResult(GetZPALSSConfigClientTypesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetZPALSSConfigClientTypesResult(
            id=self.id,
            zpn_client_type_edge_connector=self.zpn_client_type_edge_connector,
            zpn_client_type_exporter=self.zpn_client_type_exporter,
            zpn_client_type_ip_anchoring=self.zpn_client_type_ip_anchoring,
            zpn_client_type_machine_tunnel=self.zpn_client_type_machine_tunnel,
            zpn_client_type_slogger=self.zpn_client_type_slogger,
            zpn_client_type_zapp=self.zpn_client_type_zapp)


def get_zpalss_config_client_types(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetZPALSSConfigClientTypesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('zpa:index/getZPALSSConfigClientTypes:getZPALSSConfigClientTypes', __args__, opts=opts, typ=GetZPALSSConfigClientTypesResult).value

    return AwaitableGetZPALSSConfigClientTypesResult(
        id=__ret__.id,
        zpn_client_type_edge_connector=__ret__.zpn_client_type_edge_connector,
        zpn_client_type_exporter=__ret__.zpn_client_type_exporter,
        zpn_client_type_ip_anchoring=__ret__.zpn_client_type_ip_anchoring,
        zpn_client_type_machine_tunnel=__ret__.zpn_client_type_machine_tunnel,
        zpn_client_type_slogger=__ret__.zpn_client_type_slogger,
        zpn_client_type_zapp=__ret__.zpn_client_type_zapp)
