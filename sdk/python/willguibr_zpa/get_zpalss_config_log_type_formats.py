# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetZPALSSConfigLogTypeFormatsResult',
    'AwaitableGetZPALSSConfigLogTypeFormatsResult',
    'get_zpalss_config_log_type_formats',
    'get_zpalss_config_log_type_formats_output',
]

@pulumi.output_type
class GetZPALSSConfigLogTypeFormatsResult:
    """
    A collection of values returned by getZPALSSConfigLogTypeFormats.
    """
    def __init__(__self__, csv=None, id=None, json=None, log_type=None, tsv=None):
        if csv and not isinstance(csv, str):
            raise TypeError("Expected argument 'csv' to be a str")
        pulumi.set(__self__, "csv", csv)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if json and not isinstance(json, str):
            raise TypeError("Expected argument 'json' to be a str")
        pulumi.set(__self__, "json", json)
        if log_type and not isinstance(log_type, str):
            raise TypeError("Expected argument 'log_type' to be a str")
        pulumi.set(__self__, "log_type", log_type)
        if tsv and not isinstance(tsv, str):
            raise TypeError("Expected argument 'tsv' to be a str")
        pulumi.set(__self__, "tsv", tsv)

    @property
    @pulumi.getter
    def csv(self) -> str:
        return pulumi.get(self, "csv")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def json(self) -> str:
        return pulumi.get(self, "json")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> str:
        return pulumi.get(self, "log_type")

    @property
    @pulumi.getter
    def tsv(self) -> str:
        return pulumi.get(self, "tsv")


class AwaitableGetZPALSSConfigLogTypeFormatsResult(GetZPALSSConfigLogTypeFormatsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetZPALSSConfigLogTypeFormatsResult(
            csv=self.csv,
            id=self.id,
            json=self.json,
            log_type=self.log_type,
            tsv=self.tsv)


def get_zpalss_config_log_type_formats(log_type: Optional[str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetZPALSSConfigLogTypeFormatsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['logType'] = log_type
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('zpa:index/getZPALSSConfigLogTypeFormats:getZPALSSConfigLogTypeFormats', __args__, opts=opts, typ=GetZPALSSConfigLogTypeFormatsResult).value

    return AwaitableGetZPALSSConfigLogTypeFormatsResult(
        csv=__ret__.csv,
        id=__ret__.id,
        json=__ret__.json,
        log_type=__ret__.log_type,
        tsv=__ret__.tsv)


@_utilities.lift_output_func(get_zpalss_config_log_type_formats)
def get_zpalss_config_log_type_formats_output(log_type: Optional[pulumi.Input[str]] = None,
                                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetZPALSSConfigLogTypeFormatsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
