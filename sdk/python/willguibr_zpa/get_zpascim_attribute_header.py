# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetZPASCIMAttributeHeaderResult',
    'AwaitableGetZPASCIMAttributeHeaderResult',
    'get_zpascim_attribute_header',
    'get_zpascim_attribute_header_output',
]

@pulumi.output_type
class GetZPASCIMAttributeHeaderResult:
    """
    A collection of values returned by getZPASCIMAttributeHeader.
    """
    def __init__(__self__, canonical_values=None, case_sensitive=None, creation_time=None, data_type=None, description=None, id=None, idp_id=None, idp_name=None, modified_time=None, modifiedby=None, multivalued=None, mutability=None, name=None, required=None, returned=None, schema_uri=None, uniqueness=None):
        if canonical_values and not isinstance(canonical_values, list):
            raise TypeError("Expected argument 'canonical_values' to be a list")
        pulumi.set(__self__, "canonical_values", canonical_values)
        if case_sensitive and not isinstance(case_sensitive, bool):
            raise TypeError("Expected argument 'case_sensitive' to be a bool")
        pulumi.set(__self__, "case_sensitive", case_sensitive)
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        pulumi.set(__self__, "creation_time", creation_time)
        if data_type and not isinstance(data_type, str):
            raise TypeError("Expected argument 'data_type' to be a str")
        pulumi.set(__self__, "data_type", data_type)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if idp_id and not isinstance(idp_id, str):
            raise TypeError("Expected argument 'idp_id' to be a str")
        pulumi.set(__self__, "idp_id", idp_id)
        if idp_name and not isinstance(idp_name, str):
            raise TypeError("Expected argument 'idp_name' to be a str")
        pulumi.set(__self__, "idp_name", idp_name)
        if modified_time and not isinstance(modified_time, str):
            raise TypeError("Expected argument 'modified_time' to be a str")
        pulumi.set(__self__, "modified_time", modified_time)
        if modifiedby and not isinstance(modifiedby, str):
            raise TypeError("Expected argument 'modifiedby' to be a str")
        pulumi.set(__self__, "modifiedby", modifiedby)
        if multivalued and not isinstance(multivalued, bool):
            raise TypeError("Expected argument 'multivalued' to be a bool")
        pulumi.set(__self__, "multivalued", multivalued)
        if mutability and not isinstance(mutability, str):
            raise TypeError("Expected argument 'mutability' to be a str")
        pulumi.set(__self__, "mutability", mutability)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if required and not isinstance(required, bool):
            raise TypeError("Expected argument 'required' to be a bool")
        pulumi.set(__self__, "required", required)
        if returned and not isinstance(returned, str):
            raise TypeError("Expected argument 'returned' to be a str")
        pulumi.set(__self__, "returned", returned)
        if schema_uri and not isinstance(schema_uri, str):
            raise TypeError("Expected argument 'schema_uri' to be a str")
        pulumi.set(__self__, "schema_uri", schema_uri)
        if uniqueness and not isinstance(uniqueness, bool):
            raise TypeError("Expected argument 'uniqueness' to be a bool")
        pulumi.set(__self__, "uniqueness", uniqueness)

    @property
    @pulumi.getter(name="canonicalValues")
    def canonical_values(self) -> Sequence[str]:
        return pulumi.get(self, "canonical_values")

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> bool:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> str:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> str:
        return pulumi.get(self, "idp_id")

    @property
    @pulumi.getter(name="idpName")
    def idp_name(self) -> Optional[str]:
        return pulumi.get(self, "idp_name")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def multivalued(self) -> bool:
        return pulumi.get(self, "multivalued")

    @property
    @pulumi.getter
    def mutability(self) -> str:
        return pulumi.get(self, "mutability")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def required(self) -> bool:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def returned(self) -> str:
        return pulumi.get(self, "returned")

    @property
    @pulumi.getter(name="schemaUri")
    def schema_uri(self) -> str:
        return pulumi.get(self, "schema_uri")

    @property
    @pulumi.getter
    def uniqueness(self) -> bool:
        return pulumi.get(self, "uniqueness")


class AwaitableGetZPASCIMAttributeHeaderResult(GetZPASCIMAttributeHeaderResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetZPASCIMAttributeHeaderResult(
            canonical_values=self.canonical_values,
            case_sensitive=self.case_sensitive,
            creation_time=self.creation_time,
            data_type=self.data_type,
            description=self.description,
            id=self.id,
            idp_id=self.idp_id,
            idp_name=self.idp_name,
            modified_time=self.modified_time,
            modifiedby=self.modifiedby,
            multivalued=self.multivalued,
            mutability=self.mutability,
            name=self.name,
            required=self.required,
            returned=self.returned,
            schema_uri=self.schema_uri,
            uniqueness=self.uniqueness)


def get_zpascim_attribute_header(idp_name: Optional[str] = None,
                                 name: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetZPASCIMAttributeHeaderResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['idpName'] = idp_name
    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('zpa:index/getZPASCIMAttributeHeader:getZPASCIMAttributeHeader', __args__, opts=opts, typ=GetZPASCIMAttributeHeaderResult).value

    return AwaitableGetZPASCIMAttributeHeaderResult(
        canonical_values=__ret__.canonical_values,
        case_sensitive=__ret__.case_sensitive,
        creation_time=__ret__.creation_time,
        data_type=__ret__.data_type,
        description=__ret__.description,
        id=__ret__.id,
        idp_id=__ret__.idp_id,
        idp_name=__ret__.idp_name,
        modified_time=__ret__.modified_time,
        modifiedby=__ret__.modifiedby,
        multivalued=__ret__.multivalued,
        mutability=__ret__.mutability,
        name=__ret__.name,
        required=__ret__.required,
        returned=__ret__.returned,
        schema_uri=__ret__.schema_uri,
        uniqueness=__ret__.uniqueness)


@_utilities.lift_output_func(get_zpascim_attribute_header)
def get_zpascim_attribute_header_output(idp_name: Optional[pulumi.Input[Optional[str]]] = None,
                                        name: Optional[pulumi.Input[Optional[str]]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetZPASCIMAttributeHeaderResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
