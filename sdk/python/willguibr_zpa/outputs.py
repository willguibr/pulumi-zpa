# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'ZPAAppSegmentBrowserAccessClientlessApp',
    'ZPAAppSegmentBrowserAccessServerGroup',
    'ZPAApplicationSegmentServerGroup',
    'ZPALogStreamingServiceConfig',
    'ZPALogStreamingServiceConnectorGroup',
    'ZPALogStreamingServicePolicyRuleResource',
    'ZPALogStreamingServicePolicyRuleResourceCondition',
    'ZPALogStreamingServicePolicyRuleResourceConditionOperand',
    'ZPAPolicyAccessForwardingRuleCondition',
    'ZPAPolicyAccessForwardingRuleConditionOperand',
    'ZPAPolicyAccessRuleAppConnectorGroup',
    'ZPAPolicyAccessRuleAppServerGroup',
    'ZPAPolicyAccessRuleCondition',
    'ZPAPolicyAccessRuleConditionOperand',
    'ZPAPolicyAccessTimeoutRuleCondition',
    'ZPAPolicyAccessTimeoutRuleConditionOperand',
    'ZPASegmentGroupApplication',
    'ZPAServerGroupAppConnectorGroup',
    'ZPAServerGroupApplication',
    'ZPAServerGroupServer',
    'ZPAServiceEdgeGroupServiceEdge',
    'ZPAServiceEdgeGroupTrustedNetwork',
    'GetZPAAppConnectorGroupConnectorResult',
    'GetZPAAppConnectorGroupServerGroupResult',
    'GetZPAAppSegmentBrowserAccessClientlessAppResult',
    'GetZPAAppSegmentBrowserAccessServerGroupResult',
    'GetZPAApplicationSegmentServerGroupResult',
    'GetZPACloudConnectorGroupCloudConnectorResult',
    'GetZPACustomerVersionProfileCustomScopeCustomerIdResult',
    'GetZPACustomerVersionProfileVersionResult',
    'GetZPAIdPControllerAdminMetadataResult',
    'GetZPAIdPControllerUserMetadataResult',
    'GetZPALSSConfigMachineGroupMachineResult',
    'GetZPALogStreamingServiceConfigResult',
    'GetZPALogStreamingServiceConnectorGroupResult',
    'GetZPALogStreamingServicePolicyRuleResult',
    'GetZPALogStreamingServicePolicyRuleConditionResult',
    'GetZPALogStreamingServicePolicyRuleConditionOperandResult',
    'GetZPAPolicyTypeRuleResult',
    'GetZPAPolicyTypeRuleConditionResult',
    'GetZPAPolicyTypeRuleConditionOperandResult',
    'GetZPASegmentGroupApplicationResult',
    'GetZPASegmentGroupApplicationServerGroupResult',
    'GetZPAServerGroupAppConnectorGroupResult',
    'GetZPAServerGroupAppConnectorGroupConnectorResult',
    'GetZPAServerGroupAppConnectorGroupServerGroupResult',
    'GetZPAServerGroupApplicationResult',
    'GetZPAServerGroupServerResult',
    'GetZPAServiceEdgeGroupServiceEdgeResult',
    'GetZPAServiceEdgeGroupTrustedNetworkResult',
]

@pulumi.output_type
class ZPAAppSegmentBrowserAccessClientlessApp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationProtocol":
            suggest = "application_protocol"
        elif key == "certificateId":
            suggest = "certificate_id"
        elif key == "allowOptions":
            suggest = "allow_options"
        elif key == "appId":
            suggest = "app_id"
        elif key == "applicationPort":
            suggest = "application_port"
        elif key == "certificateName":
            suggest = "certificate_name"
        elif key == "localDomain":
            suggest = "local_domain"
        elif key == "trustUntrustedCert":
            suggest = "trust_untrusted_cert"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZPAAppSegmentBrowserAccessClientlessApp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZPAAppSegmentBrowserAccessClientlessApp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZPAAppSegmentBrowserAccessClientlessApp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_protocol: str,
                 certificate_id: str,
                 name: str,
                 allow_options: Optional[bool] = None,
                 app_id: Optional[str] = None,
                 application_port: Optional[str] = None,
                 certificate_name: Optional[str] = None,
                 cname: Optional[str] = None,
                 description: Optional[str] = None,
                 domain: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 hidden: Optional[bool] = None,
                 id: Optional[str] = None,
                 local_domain: Optional[str] = None,
                 path: Optional[str] = None,
                 trust_untrusted_cert: Optional[bool] = None):
        pulumi.set(__self__, "application_protocol", application_protocol)
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "name", name)
        if allow_options is not None:
            pulumi.set(__self__, "allow_options", allow_options)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if application_port is not None:
            pulumi.set(__self__, "application_port", application_port)
        if certificate_name is not None:
            pulumi.set(__self__, "certificate_name", certificate_name)
        if cname is not None:
            pulumi.set(__self__, "cname", cname)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if local_domain is not None:
            pulumi.set(__self__, "local_domain", local_domain)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if trust_untrusted_cert is not None:
            pulumi.set(__self__, "trust_untrusted_cert", trust_untrusted_cert)

    @property
    @pulumi.getter(name="applicationProtocol")
    def application_protocol(self) -> str:
        return pulumi.get(self, "application_protocol")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="allowOptions")
    def allow_options(self) -> Optional[bool]:
        return pulumi.get(self, "allow_options")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="applicationPort")
    def application_port(self) -> Optional[str]:
        return pulumi.get(self, "application_port")

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> Optional[str]:
        return pulumi.get(self, "certificate_name")

    @property
    @pulumi.getter
    def cname(self) -> Optional[str]:
        return pulumi.get(self, "cname")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def hidden(self) -> Optional[bool]:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="localDomain")
    def local_domain(self) -> Optional[str]:
        return pulumi.get(self, "local_domain")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="trustUntrustedCert")
    def trust_untrusted_cert(self) -> Optional[bool]:
        return pulumi.get(self, "trust_untrusted_cert")


@pulumi.output_type
class ZPAAppSegmentBrowserAccessServerGroup(dict):
    def __init__(__self__, *,
                 ids: Sequence[str]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZPAApplicationSegmentServerGroup(dict):
    def __init__(__self__, *,
                 ids: Sequence[str]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZPALogStreamingServiceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lssHost":
            suggest = "lss_host"
        elif key == "lssPort":
            suggest = "lss_port"
        elif key == "sourceLogType":
            suggest = "source_log_type"
        elif key == "auditMessage":
            suggest = "audit_message"
        elif key == "useTls":
            suggest = "use_tls"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZPALogStreamingServiceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZPALogStreamingServiceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZPALogStreamingServiceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format: str,
                 lss_host: str,
                 lss_port: str,
                 name: str,
                 source_log_type: str,
                 audit_message: Optional[str] = None,
                 description: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 filters: Optional[Sequence[str]] = None,
                 id: Optional[str] = None,
                 use_tls: Optional[bool] = None):
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "lss_host", lss_host)
        pulumi.set(__self__, "lss_port", lss_port)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_log_type", source_log_type)
        if audit_message is not None:
            pulumi.set(__self__, "audit_message", audit_message)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if use_tls is not None:
            pulumi.set(__self__, "use_tls", use_tls)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="lssHost")
    def lss_host(self) -> str:
        return pulumi.get(self, "lss_host")

    @property
    @pulumi.getter(name="lssPort")
    def lss_port(self) -> str:
        return pulumi.get(self, "lss_port")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sourceLogType")
    def source_log_type(self) -> str:
        return pulumi.get(self, "source_log_type")

    @property
    @pulumi.getter(name="auditMessage")
    def audit_message(self) -> Optional[str]:
        return pulumi.get(self, "audit_message")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="useTls")
    def use_tls(self) -> Optional[bool]:
        return pulumi.get(self, "use_tls")


@pulumi.output_type
class ZPALogStreamingServiceConnectorGroup(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[str]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZPALogStreamingServicePolicyRuleResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionId":
            suggest = "action_id"
        elif key == "bypassDefaultRule":
            suggest = "bypass_default_rule"
        elif key == "customMsg":
            suggest = "custom_msg"
        elif key == "defaultRule":
            suggest = "default_rule"
        elif key == "lssDefaultRule":
            suggest = "lss_default_rule"
        elif key == "policySetId":
            suggest = "policy_set_id"
        elif key == "policyType":
            suggest = "policy_type"
        elif key == "reauthDefaultRule":
            suggest = "reauth_default_rule"
        elif key == "reauthIdleTimeout":
            suggest = "reauth_idle_timeout"
        elif key == "reauthTimeout":
            suggest = "reauth_timeout"
        elif key == "ruleOrder":
            suggest = "rule_order"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZPALogStreamingServicePolicyRuleResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZPALogStreamingServicePolicyRuleResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZPALogStreamingServicePolicyRuleResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 action: Optional[str] = None,
                 action_id: Optional[str] = None,
                 bypass_default_rule: Optional[bool] = None,
                 conditions: Optional[Sequence['outputs.ZPALogStreamingServicePolicyRuleResourceCondition']] = None,
                 custom_msg: Optional[str] = None,
                 default_rule: Optional[bool] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 lss_default_rule: Optional[bool] = None,
                 operator: Optional[str] = None,
                 policy_set_id: Optional[str] = None,
                 policy_type: Optional[str] = None,
                 priority: Optional[str] = None,
                 reauth_default_rule: Optional[bool] = None,
                 reauth_idle_timeout: Optional[str] = None,
                 reauth_timeout: Optional[str] = None,
                 rule_order: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if action_id is not None:
            pulumi.set(__self__, "action_id", action_id)
        if bypass_default_rule is not None:
            pulumi.set(__self__, "bypass_default_rule", bypass_default_rule)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if custom_msg is not None:
            pulumi.set(__self__, "custom_msg", custom_msg)
        if default_rule is not None:
            pulumi.set(__self__, "default_rule", default_rule)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lss_default_rule is not None:
            pulumi.set(__self__, "lss_default_rule", lss_default_rule)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if policy_set_id is not None:
            pulumi.set(__self__, "policy_set_id", policy_set_id)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if reauth_default_rule is not None:
            pulumi.set(__self__, "reauth_default_rule", reauth_default_rule)
        if reauth_idle_timeout is not None:
            pulumi.set(__self__, "reauth_idle_timeout", reauth_idle_timeout)
        if reauth_timeout is not None:
            pulumi.set(__self__, "reauth_timeout", reauth_timeout)
        if rule_order is not None:
            pulumi.set(__self__, "rule_order", rule_order)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="actionId")
    def action_id(self) -> Optional[str]:
        return pulumi.get(self, "action_id")

    @property
    @pulumi.getter(name="bypassDefaultRule")
    def bypass_default_rule(self) -> Optional[bool]:
        return pulumi.get(self, "bypass_default_rule")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ZPALogStreamingServicePolicyRuleResourceCondition']]:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="customMsg")
    def custom_msg(self) -> Optional[str]:
        return pulumi.get(self, "custom_msg")

    @property
    @pulumi.getter(name="defaultRule")
    def default_rule(self) -> Optional[bool]:
        return pulumi.get(self, "default_rule")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lssDefaultRule")
    def lss_default_rule(self) -> Optional[bool]:
        return pulumi.get(self, "lss_default_rule")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="policySetId")
    def policy_set_id(self) -> Optional[str]:
        return pulumi.get(self, "policy_set_id")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter
    def priority(self) -> Optional[str]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="reauthDefaultRule")
    def reauth_default_rule(self) -> Optional[bool]:
        return pulumi.get(self, "reauth_default_rule")

    @property
    @pulumi.getter(name="reauthIdleTimeout")
    def reauth_idle_timeout(self) -> Optional[str]:
        return pulumi.get(self, "reauth_idle_timeout")

    @property
    @pulumi.getter(name="reauthTimeout")
    def reauth_timeout(self) -> Optional[str]:
        return pulumi.get(self, "reauth_timeout")

    @property
    @pulumi.getter(name="ruleOrder")
    def rule_order(self) -> Optional[str]:
        return pulumi.get(self, "rule_order")


@pulumi.output_type
class ZPALogStreamingServicePolicyRuleResourceCondition(dict):
    def __init__(__self__, *,
                 operator: str,
                 negated: Optional[bool] = None,
                 operands: Optional[Sequence['outputs.ZPALogStreamingServicePolicyRuleResourceConditionOperand']] = None):
        pulumi.set(__self__, "operator", operator)
        if negated is not None:
            pulumi.set(__self__, "negated", negated)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def negated(self) -> Optional[bool]:
        return pulumi.get(self, "negated")

    @property
    @pulumi.getter
    def operands(self) -> Optional[Sequence['outputs.ZPALogStreamingServicePolicyRuleResourceConditionOperand']]:
        return pulumi.get(self, "operands")


@pulumi.output_type
class ZPALogStreamingServicePolicyRuleResourceConditionOperand(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectType":
            suggest = "object_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZPALogStreamingServicePolicyRuleResourceConditionOperand. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZPALogStreamingServicePolicyRuleResourceConditionOperand.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZPALogStreamingServicePolicyRuleResourceConditionOperand.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_type: str,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "object_type", object_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class ZPAPolicyAccessForwardingRuleCondition(dict):
    def __init__(__self__, *,
                 operator: str,
                 id: Optional[str] = None,
                 negated: Optional[bool] = None,
                 operands: Optional[Sequence['outputs.ZPAPolicyAccessForwardingRuleConditionOperand']] = None):
        pulumi.set(__self__, "operator", operator)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if negated is not None:
            pulumi.set(__self__, "negated", negated)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def negated(self) -> Optional[bool]:
        return pulumi.get(self, "negated")

    @property
    @pulumi.getter
    def operands(self) -> Optional[Sequence['outputs.ZPAPolicyAccessForwardingRuleConditionOperand']]:
        return pulumi.get(self, "operands")


@pulumi.output_type
class ZPAPolicyAccessForwardingRuleConditionOperand(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectType":
            suggest = "object_type"
        elif key == "idpId":
            suggest = "idp_id"
        elif key == "rhsLists":
            suggest = "rhs_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZPAPolicyAccessForwardingRuleConditionOperand. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZPAPolicyAccessForwardingRuleConditionOperand.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZPAPolicyAccessForwardingRuleConditionOperand.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 lhs: str,
                 object_type: str,
                 id: Optional[str] = None,
                 idp_id: Optional[str] = None,
                 name: Optional[str] = None,
                 rhs: Optional[str] = None,
                 rhs_lists: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "lhs", lhs)
        pulumi.set(__self__, "object_type", object_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idp_id is not None:
            pulumi.set(__self__, "idp_id", idp_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)
        if rhs_lists is not None:
            pulumi.set(__self__, "rhs_lists", rhs_lists)

    @property
    @pulumi.getter
    def lhs(self) -> str:
        return pulumi.get(self, "lhs")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> Optional[str]:
        return pulumi.get(self, "idp_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rhs(self) -> Optional[str]:
        return pulumi.get(self, "rhs")

    @property
    @pulumi.getter(name="rhsLists")
    def rhs_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "rhs_lists")


@pulumi.output_type
class ZPAPolicyAccessRuleAppConnectorGroup(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[str]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZPAPolicyAccessRuleAppServerGroup(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[str]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZPAPolicyAccessRuleCondition(dict):
    def __init__(__self__, *,
                 operator: str,
                 id: Optional[str] = None,
                 negated: Optional[bool] = None,
                 operands: Optional[Sequence['outputs.ZPAPolicyAccessRuleConditionOperand']] = None):
        pulumi.set(__self__, "operator", operator)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if negated is not None:
            pulumi.set(__self__, "negated", negated)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def negated(self) -> Optional[bool]:
        return pulumi.get(self, "negated")

    @property
    @pulumi.getter
    def operands(self) -> Optional[Sequence['outputs.ZPAPolicyAccessRuleConditionOperand']]:
        return pulumi.get(self, "operands")


@pulumi.output_type
class ZPAPolicyAccessRuleConditionOperand(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectType":
            suggest = "object_type"
        elif key == "idpId":
            suggest = "idp_id"
        elif key == "rhsLists":
            suggest = "rhs_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZPAPolicyAccessRuleConditionOperand. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZPAPolicyAccessRuleConditionOperand.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZPAPolicyAccessRuleConditionOperand.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 lhs: str,
                 object_type: str,
                 id: Optional[str] = None,
                 idp_id: Optional[str] = None,
                 name: Optional[str] = None,
                 rhs: Optional[str] = None,
                 rhs_lists: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "lhs", lhs)
        pulumi.set(__self__, "object_type", object_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idp_id is not None:
            pulumi.set(__self__, "idp_id", idp_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)
        if rhs_lists is not None:
            pulumi.set(__self__, "rhs_lists", rhs_lists)

    @property
    @pulumi.getter
    def lhs(self) -> str:
        return pulumi.get(self, "lhs")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> Optional[str]:
        return pulumi.get(self, "idp_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rhs(self) -> Optional[str]:
        return pulumi.get(self, "rhs")

    @property
    @pulumi.getter(name="rhsLists")
    def rhs_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "rhs_lists")


@pulumi.output_type
class ZPAPolicyAccessTimeoutRuleCondition(dict):
    def __init__(__self__, *,
                 operator: str,
                 id: Optional[str] = None,
                 negated: Optional[bool] = None,
                 operands: Optional[Sequence['outputs.ZPAPolicyAccessTimeoutRuleConditionOperand']] = None):
        pulumi.set(__self__, "operator", operator)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if negated is not None:
            pulumi.set(__self__, "negated", negated)
        if operands is not None:
            pulumi.set(__self__, "operands", operands)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def negated(self) -> Optional[bool]:
        return pulumi.get(self, "negated")

    @property
    @pulumi.getter
    def operands(self) -> Optional[Sequence['outputs.ZPAPolicyAccessTimeoutRuleConditionOperand']]:
        return pulumi.get(self, "operands")


@pulumi.output_type
class ZPAPolicyAccessTimeoutRuleConditionOperand(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectType":
            suggest = "object_type"
        elif key == "idpId":
            suggest = "idp_id"
        elif key == "rhsLists":
            suggest = "rhs_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZPAPolicyAccessTimeoutRuleConditionOperand. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZPAPolicyAccessTimeoutRuleConditionOperand.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZPAPolicyAccessTimeoutRuleConditionOperand.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 lhs: str,
                 object_type: str,
                 id: Optional[str] = None,
                 idp_id: Optional[str] = None,
                 name: Optional[str] = None,
                 rhs: Optional[str] = None,
                 rhs_lists: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "lhs", lhs)
        pulumi.set(__self__, "object_type", object_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idp_id is not None:
            pulumi.set(__self__, "idp_id", idp_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rhs is not None:
            pulumi.set(__self__, "rhs", rhs)
        if rhs_lists is not None:
            pulumi.set(__self__, "rhs_lists", rhs_lists)

    @property
    @pulumi.getter
    def lhs(self) -> str:
        return pulumi.get(self, "lhs")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> Optional[str]:
        return pulumi.get(self, "idp_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rhs(self) -> Optional[str]:
        return pulumi.get(self, "rhs")

    @property
    @pulumi.getter(name="rhsLists")
    def rhs_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "rhs_lists")


@pulumi.output_type
class ZPASegmentGroupApplication(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class ZPAServerGroupAppConnectorGroup(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[str]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZPAServerGroupApplication(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[str]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZPAServerGroupServer(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[str]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZPAServiceEdgeGroupServiceEdge(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[str]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZPAServiceEdgeGroupTrustedNetwork(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[str]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class GetZPAAppConnectorGroupConnectorResult(dict):
    def __init__(__self__, *,
                 appconnector_group_id: str,
                 appconnector_group_name: str,
                 application_start_time: str,
                 control_channel_status: str,
                 creation_time: str,
                 ctrl_broker_name: str,
                 current_version: str,
                 description: str,
                 enabled: bool,
                 enrollment_cert: Mapping[str, Any],
                 expected_upgrade_time: str,
                 expected_version: str,
                 fingerprint: str,
                 id: str,
                 ipacl: str,
                 issued_cert_id: str,
                 last_broker_connect_time: str,
                 last_broker_connect_time_duration: str,
                 last_broker_disconnect_time: str,
                 last_broker_disconnect_time_duration: str,
                 last_upgrade_time: str,
                 latitude: str,
                 location: str,
                 longitude: str,
                 modified_time: str,
                 modifiedby: str,
                 name: str,
                 platform: str,
                 previous_version: str,
                 private_ip: str,
                 provisioning_key_id: str,
                 provisioning_key_name: str,
                 public_ip: str,
                 sarge_version: str,
                 upgrade_attempt: str,
                 upgrade_status: str):
        pulumi.set(__self__, "appconnector_group_id", appconnector_group_id)
        pulumi.set(__self__, "appconnector_group_name", appconnector_group_name)
        pulumi.set(__self__, "application_start_time", application_start_time)
        pulumi.set(__self__, "control_channel_status", control_channel_status)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "ctrl_broker_name", ctrl_broker_name)
        pulumi.set(__self__, "current_version", current_version)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "enrollment_cert", enrollment_cert)
        pulumi.set(__self__, "expected_upgrade_time", expected_upgrade_time)
        pulumi.set(__self__, "expected_version", expected_version)
        pulumi.set(__self__, "fingerprint", fingerprint)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ipacl", ipacl)
        pulumi.set(__self__, "issued_cert_id", issued_cert_id)
        pulumi.set(__self__, "last_broker_connect_time", last_broker_connect_time)
        pulumi.set(__self__, "last_broker_connect_time_duration", last_broker_connect_time_duration)
        pulumi.set(__self__, "last_broker_disconnect_time", last_broker_disconnect_time)
        pulumi.set(__self__, "last_broker_disconnect_time_duration", last_broker_disconnect_time_duration)
        pulumi.set(__self__, "last_upgrade_time", last_upgrade_time)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "longitude", longitude)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "previous_version", previous_version)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "provisioning_key_id", provisioning_key_id)
        pulumi.set(__self__, "provisioning_key_name", provisioning_key_name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "sarge_version", sarge_version)
        pulumi.set(__self__, "upgrade_attempt", upgrade_attempt)
        pulumi.set(__self__, "upgrade_status", upgrade_status)

    @property
    @pulumi.getter(name="appconnectorGroupId")
    def appconnector_group_id(self) -> str:
        return pulumi.get(self, "appconnector_group_id")

    @property
    @pulumi.getter(name="appconnectorGroupName")
    def appconnector_group_name(self) -> str:
        return pulumi.get(self, "appconnector_group_name")

    @property
    @pulumi.getter(name="applicationStartTime")
    def application_start_time(self) -> str:
        return pulumi.get(self, "application_start_time")

    @property
    @pulumi.getter(name="controlChannelStatus")
    def control_channel_status(self) -> str:
        return pulumi.get(self, "control_channel_status")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="ctrlBrokerName")
    def ctrl_broker_name(self) -> str:
        return pulumi.get(self, "ctrl_broker_name")

    @property
    @pulumi.getter(name="currentVersion")
    def current_version(self) -> str:
        return pulumi.get(self, "current_version")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="enrollmentCert")
    def enrollment_cert(self) -> Mapping[str, Any]:
        return pulumi.get(self, "enrollment_cert")

    @property
    @pulumi.getter(name="expectedUpgradeTime")
    def expected_upgrade_time(self) -> str:
        return pulumi.get(self, "expected_upgrade_time")

    @property
    @pulumi.getter(name="expectedVersion")
    def expected_version(self) -> str:
        return pulumi.get(self, "expected_version")

    @property
    @pulumi.getter
    def fingerprint(self) -> str:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ipacl(self) -> str:
        return pulumi.get(self, "ipacl")

    @property
    @pulumi.getter(name="issuedCertId")
    def issued_cert_id(self) -> str:
        return pulumi.get(self, "issued_cert_id")

    @property
    @pulumi.getter(name="lastBrokerConnectTime")
    def last_broker_connect_time(self) -> str:
        return pulumi.get(self, "last_broker_connect_time")

    @property
    @pulumi.getter(name="lastBrokerConnectTimeDuration")
    def last_broker_connect_time_duration(self) -> str:
        return pulumi.get(self, "last_broker_connect_time_duration")

    @property
    @pulumi.getter(name="lastBrokerDisconnectTime")
    def last_broker_disconnect_time(self) -> str:
        return pulumi.get(self, "last_broker_disconnect_time")

    @property
    @pulumi.getter(name="lastBrokerDisconnectTimeDuration")
    def last_broker_disconnect_time_duration(self) -> str:
        return pulumi.get(self, "last_broker_disconnect_time_duration")

    @property
    @pulumi.getter(name="lastUpgradeTime")
    def last_upgrade_time(self) -> str:
        return pulumi.get(self, "last_upgrade_time")

    @property
    @pulumi.getter
    def latitude(self) -> str:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def location(self) -> str:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def longitude(self) -> str:
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def platform(self) -> str:
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="previousVersion")
    def previous_version(self) -> str:
        return pulumi.get(self, "previous_version")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="provisioningKeyId")
    def provisioning_key_id(self) -> str:
        return pulumi.get(self, "provisioning_key_id")

    @property
    @pulumi.getter(name="provisioningKeyName")
    def provisioning_key_name(self) -> str:
        return pulumi.get(self, "provisioning_key_name")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="sargeVersion")
    def sarge_version(self) -> str:
        return pulumi.get(self, "sarge_version")

    @property
    @pulumi.getter(name="upgradeAttempt")
    def upgrade_attempt(self) -> str:
        return pulumi.get(self, "upgrade_attempt")

    @property
    @pulumi.getter(name="upgradeStatus")
    def upgrade_status(self) -> str:
        return pulumi.get(self, "upgrade_status")


@pulumi.output_type
class GetZPAAppConnectorGroupServerGroupResult(dict):
    def __init__(__self__, *,
                 config_space: str,
                 creation_time: str,
                 description: str,
                 dynamic_discovery: bool,
                 enabled: bool,
                 id: str,
                 modified_time: str,
                 modifiedby: str,
                 name: str):
        pulumi.set(__self__, "config_space", config_space)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dynamic_discovery", dynamic_discovery)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="configSpace")
    def config_space(self) -> str:
        return pulumi.get(self, "config_space")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dynamicDiscovery")
    def dynamic_discovery(self) -> bool:
        return pulumi.get(self, "dynamic_discovery")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZPAAppSegmentBrowserAccessClientlessAppResult(dict):
    def __init__(__self__, *,
                 allow_options: bool,
                 app_id: str,
                 application_port: str,
                 application_protocol: str,
                 certificate_id: str,
                 certificate_name: str,
                 cname: str,
                 description: str,
                 domain: str,
                 enabled: bool,
                 hidden: bool,
                 id: str,
                 local_domain: str,
                 name: str,
                 path: str,
                 trust_untrusted_cert: bool):
        pulumi.set(__self__, "allow_options", allow_options)
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "application_port", application_port)
        pulumi.set(__self__, "application_protocol", application_protocol)
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "certificate_name", certificate_name)
        pulumi.set(__self__, "cname", cname)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "hidden", hidden)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "local_domain", local_domain)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "trust_untrusted_cert", trust_untrusted_cert)

    @property
    @pulumi.getter(name="allowOptions")
    def allow_options(self) -> bool:
        return pulumi.get(self, "allow_options")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="applicationPort")
    def application_port(self) -> str:
        return pulumi.get(self, "application_port")

    @property
    @pulumi.getter(name="applicationProtocol")
    def application_protocol(self) -> str:
        return pulumi.get(self, "application_protocol")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> str:
        return pulumi.get(self, "certificate_name")

    @property
    @pulumi.getter
    def cname(self) -> str:
        return pulumi.get(self, "cname")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def hidden(self) -> bool:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="localDomain")
    def local_domain(self) -> str:
        return pulumi.get(self, "local_domain")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="trustUntrustedCert")
    def trust_untrusted_cert(self) -> bool:
        return pulumi.get(self, "trust_untrusted_cert")


@pulumi.output_type
class GetZPAAppSegmentBrowserAccessServerGroupResult(dict):
    def __init__(__self__, *,
                 ids: Sequence[str]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class GetZPAApplicationSegmentServerGroupResult(dict):
    def __init__(__self__, *,
                 config_space: str,
                 creation_time: str,
                 description: str,
                 dynamic_discovery: bool,
                 enabled: bool,
                 id: str,
                 modified_time: str,
                 modifiedby: str,
                 name: str):
        pulumi.set(__self__, "config_space", config_space)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dynamic_discovery", dynamic_discovery)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="configSpace")
    def config_space(self) -> str:
        return pulumi.get(self, "config_space")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dynamicDiscovery")
    def dynamic_discovery(self) -> bool:
        return pulumi.get(self, "dynamic_discovery")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZPACloudConnectorGroupCloudConnectorResult(dict):
    def __init__(__self__, *,
                 creation_time: str,
                 description: str,
                 enabled: bool,
                 fingerprint: str,
                 id: str,
                 ipacls: Sequence[Any],
                 issued_cert_id: str,
                 modified_time: str,
                 modifiedby: str,
                 name: str,
                 signing_cert: Mapping[str, Any]):
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "fingerprint", fingerprint)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ipacls", ipacls)
        pulumi.set(__self__, "issued_cert_id", issued_cert_id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "signing_cert", signing_cert)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def fingerprint(self) -> str:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ipacls(self) -> Sequence[Any]:
        return pulumi.get(self, "ipacls")

    @property
    @pulumi.getter(name="issuedCertId")
    def issued_cert_id(self) -> str:
        return pulumi.get(self, "issued_cert_id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="signingCert")
    def signing_cert(self) -> Mapping[str, Any]:
        return pulumi.get(self, "signing_cert")


@pulumi.output_type
class GetZPACustomerVersionProfileCustomScopeCustomerIdResult(dict):
    def __init__(__self__, *,
                 customer_id: str,
                 exclude_constellation: bool,
                 name: str):
        pulumi.set(__self__, "customer_id", customer_id)
        pulumi.set(__self__, "exclude_constellation", exclude_constellation)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> str:
        return pulumi.get(self, "customer_id")

    @property
    @pulumi.getter(name="excludeConstellation")
    def exclude_constellation(self) -> bool:
        return pulumi.get(self, "exclude_constellation")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZPACustomerVersionProfileVersionResult(dict):
    def __init__(__self__, *,
                 creation_time: str,
                 customer_id: str,
                 id: str,
                 modified_time: str,
                 modifiedby: str,
                 platform: str,
                 restart_after_uptime_in_days: str,
                 role: str,
                 version: str,
                 version_profile_gid: str):
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "customer_id", customer_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "restart_after_uptime_in_days", restart_after_uptime_in_days)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "version_profile_gid", version_profile_gid)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> str:
        return pulumi.get(self, "customer_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def platform(self) -> str:
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="restartAfterUptimeInDays")
    def restart_after_uptime_in_days(self) -> str:
        return pulumi.get(self, "restart_after_uptime_in_days")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionProfileGid")
    def version_profile_gid(self) -> str:
        return pulumi.get(self, "version_profile_gid")


@pulumi.output_type
class GetZPAIdPControllerAdminMetadataResult(dict):
    def __init__(__self__, *,
                 certificate_url: str,
                 sp_base_url: str,
                 sp_entity_id: str,
                 sp_metadata_url: str,
                 sp_post_url: str):
        pulumi.set(__self__, "certificate_url", certificate_url)
        pulumi.set(__self__, "sp_base_url", sp_base_url)
        pulumi.set(__self__, "sp_entity_id", sp_entity_id)
        pulumi.set(__self__, "sp_metadata_url", sp_metadata_url)
        pulumi.set(__self__, "sp_post_url", sp_post_url)

    @property
    @pulumi.getter(name="certificateUrl")
    def certificate_url(self) -> str:
        return pulumi.get(self, "certificate_url")

    @property
    @pulumi.getter(name="spBaseUrl")
    def sp_base_url(self) -> str:
        return pulumi.get(self, "sp_base_url")

    @property
    @pulumi.getter(name="spEntityId")
    def sp_entity_id(self) -> str:
        return pulumi.get(self, "sp_entity_id")

    @property
    @pulumi.getter(name="spMetadataUrl")
    def sp_metadata_url(self) -> str:
        return pulumi.get(self, "sp_metadata_url")

    @property
    @pulumi.getter(name="spPostUrl")
    def sp_post_url(self) -> str:
        return pulumi.get(self, "sp_post_url")


@pulumi.output_type
class GetZPAIdPControllerUserMetadataResult(dict):
    def __init__(__self__, *,
                 certificate_url: str,
                 sp_base_url: str,
                 sp_entity_id: str,
                 sp_metadata_url: str,
                 sp_post_url: str):
        pulumi.set(__self__, "certificate_url", certificate_url)
        pulumi.set(__self__, "sp_base_url", sp_base_url)
        pulumi.set(__self__, "sp_entity_id", sp_entity_id)
        pulumi.set(__self__, "sp_metadata_url", sp_metadata_url)
        pulumi.set(__self__, "sp_post_url", sp_post_url)

    @property
    @pulumi.getter(name="certificateUrl")
    def certificate_url(self) -> str:
        return pulumi.get(self, "certificate_url")

    @property
    @pulumi.getter(name="spBaseUrl")
    def sp_base_url(self) -> str:
        return pulumi.get(self, "sp_base_url")

    @property
    @pulumi.getter(name="spEntityId")
    def sp_entity_id(self) -> str:
        return pulumi.get(self, "sp_entity_id")

    @property
    @pulumi.getter(name="spMetadataUrl")
    def sp_metadata_url(self) -> str:
        return pulumi.get(self, "sp_metadata_url")

    @property
    @pulumi.getter(name="spPostUrl")
    def sp_post_url(self) -> str:
        return pulumi.get(self, "sp_post_url")


@pulumi.output_type
class GetZPALSSConfigMachineGroupMachineResult(dict):
    def __init__(__self__, *,
                 creation_time: str,
                 description: str,
                 fingerprint: str,
                 id: str,
                 issued_cert_id: str,
                 machine_group_id: str,
                 machine_group_name: str,
                 machine_token_id: str,
                 modified_time: str,
                 modifiedby: str,
                 name: str,
                 signing_cert: Mapping[str, str]):
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "fingerprint", fingerprint)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "issued_cert_id", issued_cert_id)
        pulumi.set(__self__, "machine_group_id", machine_group_id)
        pulumi.set(__self__, "machine_group_name", machine_group_name)
        pulumi.set(__self__, "machine_token_id", machine_token_id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "signing_cert", signing_cert)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def fingerprint(self) -> str:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="issuedCertId")
    def issued_cert_id(self) -> str:
        return pulumi.get(self, "issued_cert_id")

    @property
    @pulumi.getter(name="machineGroupId")
    def machine_group_id(self) -> str:
        return pulumi.get(self, "machine_group_id")

    @property
    @pulumi.getter(name="machineGroupName")
    def machine_group_name(self) -> str:
        return pulumi.get(self, "machine_group_name")

    @property
    @pulumi.getter(name="machineTokenId")
    def machine_token_id(self) -> str:
        return pulumi.get(self, "machine_token_id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="signingCert")
    def signing_cert(self) -> Mapping[str, str]:
        return pulumi.get(self, "signing_cert")


@pulumi.output_type
class GetZPALogStreamingServiceConfigResult(dict):
    def __init__(__self__, *,
                 audit_message: str,
                 description: str,
                 enabled: bool,
                 filters: Sequence[str],
                 format: str,
                 id: str,
                 lss_host: str,
                 lss_port: str,
                 name: str,
                 source_log_type: str,
                 use_tls: bool):
        pulumi.set(__self__, "audit_message", audit_message)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lss_host", lss_host)
        pulumi.set(__self__, "lss_port", lss_port)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source_log_type", source_log_type)
        pulumi.set(__self__, "use_tls", use_tls)

    @property
    @pulumi.getter(name="auditMessage")
    def audit_message(self) -> str:
        return pulumi.get(self, "audit_message")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def filters(self) -> Sequence[str]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lssHost")
    def lss_host(self) -> str:
        return pulumi.get(self, "lss_host")

    @property
    @pulumi.getter(name="lssPort")
    def lss_port(self) -> str:
        return pulumi.get(self, "lss_port")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sourceLogType")
    def source_log_type(self) -> str:
        return pulumi.get(self, "source_log_type")

    @property
    @pulumi.getter(name="useTls")
    def use_tls(self) -> bool:
        return pulumi.get(self, "use_tls")


@pulumi.output_type
class GetZPALogStreamingServiceConnectorGroupResult(dict):
    def __init__(__self__, *,
                 id: str):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetZPALogStreamingServicePolicyRuleResult(dict):
    def __init__(__self__, *,
                 action: str,
                 action_id: str,
                 bypass_default_rule: bool,
                 conditions: Sequence['outputs.GetZPALogStreamingServicePolicyRuleConditionResult'],
                 creation_time: str,
                 custom_msg: str,
                 default_rule: bool,
                 description: str,
                 id: str,
                 isolation_default_rule: bool,
                 lss_default_rule: bool,
                 modified_time: str,
                 modifiedby: str,
                 name: str,
                 operator: str,
                 policy_set_id: str,
                 policy_type: str,
                 priority: str,
                 reauth_default_rule: bool,
                 reauth_idle_timeout: str,
                 reauth_timeout: str,
                 rule_order: str,
                 zpn_cbi_profile_id: str,
                 zpn_inspection_profile_id: str,
                 zpn_inspection_profile_name: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "action_id", action_id)
        pulumi.set(__self__, "bypass_default_rule", bypass_default_rule)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "custom_msg", custom_msg)
        pulumi.set(__self__, "default_rule", default_rule)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "isolation_default_rule", isolation_default_rule)
        pulumi.set(__self__, "lss_default_rule", lss_default_rule)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "policy_set_id", policy_set_id)
        pulumi.set(__self__, "policy_type", policy_type)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "reauth_default_rule", reauth_default_rule)
        pulumi.set(__self__, "reauth_idle_timeout", reauth_idle_timeout)
        pulumi.set(__self__, "reauth_timeout", reauth_timeout)
        pulumi.set(__self__, "rule_order", rule_order)
        pulumi.set(__self__, "zpn_cbi_profile_id", zpn_cbi_profile_id)
        pulumi.set(__self__, "zpn_inspection_profile_id", zpn_inspection_profile_id)
        pulumi.set(__self__, "zpn_inspection_profile_name", zpn_inspection_profile_name)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="actionId")
    def action_id(self) -> str:
        return pulumi.get(self, "action_id")

    @property
    @pulumi.getter(name="bypassDefaultRule")
    def bypass_default_rule(self) -> bool:
        return pulumi.get(self, "bypass_default_rule")

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetZPALogStreamingServicePolicyRuleConditionResult']:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="customMsg")
    def custom_msg(self) -> str:
        return pulumi.get(self, "custom_msg")

    @property
    @pulumi.getter(name="defaultRule")
    def default_rule(self) -> bool:
        return pulumi.get(self, "default_rule")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isolationDefaultRule")
    def isolation_default_rule(self) -> bool:
        return pulumi.get(self, "isolation_default_rule")

    @property
    @pulumi.getter(name="lssDefaultRule")
    def lss_default_rule(self) -> bool:
        return pulumi.get(self, "lss_default_rule")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="policySetId")
    def policy_set_id(self) -> str:
        return pulumi.get(self, "policy_set_id")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter
    def priority(self) -> str:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="reauthDefaultRule")
    def reauth_default_rule(self) -> bool:
        return pulumi.get(self, "reauth_default_rule")

    @property
    @pulumi.getter(name="reauthIdleTimeout")
    def reauth_idle_timeout(self) -> str:
        return pulumi.get(self, "reauth_idle_timeout")

    @property
    @pulumi.getter(name="reauthTimeout")
    def reauth_timeout(self) -> str:
        return pulumi.get(self, "reauth_timeout")

    @property
    @pulumi.getter(name="ruleOrder")
    def rule_order(self) -> str:
        return pulumi.get(self, "rule_order")

    @property
    @pulumi.getter(name="zpnCbiProfileId")
    def zpn_cbi_profile_id(self) -> str:
        return pulumi.get(self, "zpn_cbi_profile_id")

    @property
    @pulumi.getter(name="zpnInspectionProfileId")
    def zpn_inspection_profile_id(self) -> str:
        return pulumi.get(self, "zpn_inspection_profile_id")

    @property
    @pulumi.getter(name="zpnInspectionProfileName")
    def zpn_inspection_profile_name(self) -> str:
        return pulumi.get(self, "zpn_inspection_profile_name")


@pulumi.output_type
class GetZPALogStreamingServicePolicyRuleConditionResult(dict):
    def __init__(__self__, *,
                 creation_time: str,
                 id: str,
                 modified_time: str,
                 modifiedby: str,
                 negated: bool,
                 operands: Sequence['outputs.GetZPALogStreamingServicePolicyRuleConditionOperandResult'],
                 operator: str):
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "negated", negated)
        pulumi.set(__self__, "operands", operands)
        pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def negated(self) -> bool:
        return pulumi.get(self, "negated")

    @property
    @pulumi.getter
    def operands(self) -> Sequence['outputs.GetZPALogStreamingServicePolicyRuleConditionOperandResult']:
        return pulumi.get(self, "operands")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")


@pulumi.output_type
class GetZPALogStreamingServicePolicyRuleConditionOperandResult(dict):
    def __init__(__self__, *,
                 creation_time: str,
                 id: str,
                 idp_id: str,
                 lhs: str,
                 modified_time: str,
                 modifiedby: str,
                 name: str,
                 object_type: str,
                 operator: str,
                 rhs: str):
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idp_id", idp_id)
        pulumi.set(__self__, "lhs", lhs)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "rhs", rhs)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> str:
        return pulumi.get(self, "idp_id")

    @property
    @pulumi.getter
    def lhs(self) -> str:
        return pulumi.get(self, "lhs")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def rhs(self) -> str:
        return pulumi.get(self, "rhs")


@pulumi.output_type
class GetZPAPolicyTypeRuleResult(dict):
    def __init__(__self__, *,
                 action: str,
                 action_id: str,
                 bypass_default_rule: bool,
                 conditions: Sequence['outputs.GetZPAPolicyTypeRuleConditionResult'],
                 creation_time: str,
                 custom_msg: str,
                 description: str,
                 id: str,
                 isolation_default_rule: bool,
                 modified_time: str,
                 modifiedby: str,
                 name: str,
                 operator: str,
                 policy_set_id: str,
                 policy_type: str,
                 priority: str,
                 reauth_default_rule: bool,
                 reauth_idle_timeout: str,
                 reauth_timeout: str,
                 rule_order: str,
                 zpn_cbi_profile_id: str,
                 zpn_inspection_profile_id: str,
                 zpn_inspection_profile_name: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "action_id", action_id)
        pulumi.set(__self__, "bypass_default_rule", bypass_default_rule)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "custom_msg", custom_msg)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "isolation_default_rule", isolation_default_rule)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "policy_set_id", policy_set_id)
        pulumi.set(__self__, "policy_type", policy_type)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "reauth_default_rule", reauth_default_rule)
        pulumi.set(__self__, "reauth_idle_timeout", reauth_idle_timeout)
        pulumi.set(__self__, "reauth_timeout", reauth_timeout)
        pulumi.set(__self__, "rule_order", rule_order)
        pulumi.set(__self__, "zpn_cbi_profile_id", zpn_cbi_profile_id)
        pulumi.set(__self__, "zpn_inspection_profile_id", zpn_inspection_profile_id)
        pulumi.set(__self__, "zpn_inspection_profile_name", zpn_inspection_profile_name)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="actionId")
    def action_id(self) -> str:
        return pulumi.get(self, "action_id")

    @property
    @pulumi.getter(name="bypassDefaultRule")
    def bypass_default_rule(self) -> bool:
        return pulumi.get(self, "bypass_default_rule")

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetZPAPolicyTypeRuleConditionResult']:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="customMsg")
    def custom_msg(self) -> str:
        return pulumi.get(self, "custom_msg")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isolationDefaultRule")
    def isolation_default_rule(self) -> bool:
        return pulumi.get(self, "isolation_default_rule")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="policySetId")
    def policy_set_id(self) -> str:
        return pulumi.get(self, "policy_set_id")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter
    def priority(self) -> str:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="reauthDefaultRule")
    def reauth_default_rule(self) -> bool:
        return pulumi.get(self, "reauth_default_rule")

    @property
    @pulumi.getter(name="reauthIdleTimeout")
    def reauth_idle_timeout(self) -> str:
        return pulumi.get(self, "reauth_idle_timeout")

    @property
    @pulumi.getter(name="reauthTimeout")
    def reauth_timeout(self) -> str:
        return pulumi.get(self, "reauth_timeout")

    @property
    @pulumi.getter(name="ruleOrder")
    def rule_order(self) -> str:
        return pulumi.get(self, "rule_order")

    @property
    @pulumi.getter(name="zpnCbiProfileId")
    def zpn_cbi_profile_id(self) -> str:
        return pulumi.get(self, "zpn_cbi_profile_id")

    @property
    @pulumi.getter(name="zpnInspectionProfileId")
    def zpn_inspection_profile_id(self) -> str:
        return pulumi.get(self, "zpn_inspection_profile_id")

    @property
    @pulumi.getter(name="zpnInspectionProfileName")
    def zpn_inspection_profile_name(self) -> str:
        return pulumi.get(self, "zpn_inspection_profile_name")


@pulumi.output_type
class GetZPAPolicyTypeRuleConditionResult(dict):
    def __init__(__self__, *,
                 creation_time: str,
                 id: str,
                 modified_time: str,
                 modifiedby: str,
                 negated: bool,
                 operands: Sequence['outputs.GetZPAPolicyTypeRuleConditionOperandResult'],
                 operator: str):
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "negated", negated)
        pulumi.set(__self__, "operands", operands)
        pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def negated(self) -> bool:
        return pulumi.get(self, "negated")

    @property
    @pulumi.getter
    def operands(self) -> Sequence['outputs.GetZPAPolicyTypeRuleConditionOperandResult']:
        return pulumi.get(self, "operands")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")


@pulumi.output_type
class GetZPAPolicyTypeRuleConditionOperandResult(dict):
    def __init__(__self__, *,
                 creation_time: str,
                 id: str,
                 idp_id: str,
                 lhs: str,
                 modified_time: str,
                 modifiedby: str,
                 name: str,
                 object_type: str,
                 operator: str,
                 rhs: str):
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idp_id", idp_id)
        pulumi.set(__self__, "lhs", lhs)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "rhs", rhs)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> str:
        return pulumi.get(self, "idp_id")

    @property
    @pulumi.getter
    def lhs(self) -> str:
        return pulumi.get(self, "lhs")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def rhs(self) -> str:
        return pulumi.get(self, "rhs")


@pulumi.output_type
class GetZPASegmentGroupApplicationResult(dict):
    def __init__(__self__, *,
                 bypass_type: str,
                 config_space: str,
                 creation_time: str,
                 default_idle_timeout: str,
                 default_max_age: str,
                 description: str,
                 domain_name: str,
                 domain_names: Sequence[str],
                 double_encrypt: bool,
                 enabled: bool,
                 health_check_type: str,
                 id: str,
                 ip_anchored: bool,
                 log_features: Sequence[str],
                 modified_time: str,
                 modifiedby: str,
                 name: str,
                 passive_health_enabled: bool,
                 server_groups: Sequence['outputs.GetZPASegmentGroupApplicationServerGroupResult'],
                 tcp_port_ranges: Sequence[str],
                 tcp_ports_ins: Sequence[str],
                 tcp_ports_outs: Sequence[str],
                 udp_port_ranges: Sequence[str]):
        pulumi.set(__self__, "bypass_type", bypass_type)
        pulumi.set(__self__, "config_space", config_space)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "default_idle_timeout", default_idle_timeout)
        pulumi.set(__self__, "default_max_age", default_max_age)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "domain_names", domain_names)
        pulumi.set(__self__, "double_encrypt", double_encrypt)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "health_check_type", health_check_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_anchored", ip_anchored)
        pulumi.set(__self__, "log_features", log_features)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "passive_health_enabled", passive_health_enabled)
        pulumi.set(__self__, "server_groups", server_groups)
        pulumi.set(__self__, "tcp_port_ranges", tcp_port_ranges)
        pulumi.set(__self__, "tcp_ports_ins", tcp_ports_ins)
        pulumi.set(__self__, "tcp_ports_outs", tcp_ports_outs)
        pulumi.set(__self__, "udp_port_ranges", udp_port_ranges)

    @property
    @pulumi.getter(name="bypassType")
    def bypass_type(self) -> str:
        return pulumi.get(self, "bypass_type")

    @property
    @pulumi.getter(name="configSpace")
    def config_space(self) -> str:
        return pulumi.get(self, "config_space")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="defaultIdleTimeout")
    def default_idle_timeout(self) -> str:
        return pulumi.get(self, "default_idle_timeout")

    @property
    @pulumi.getter(name="defaultMaxAge")
    def default_max_age(self) -> str:
        return pulumi.get(self, "default_max_age")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> str:
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="domainNames")
    def domain_names(self) -> Sequence[str]:
        return pulumi.get(self, "domain_names")

    @property
    @pulumi.getter(name="doubleEncrypt")
    def double_encrypt(self) -> bool:
        return pulumi.get(self, "double_encrypt")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> str:
        return pulumi.get(self, "health_check_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAnchored")
    def ip_anchored(self) -> bool:
        return pulumi.get(self, "ip_anchored")

    @property
    @pulumi.getter(name="logFeatures")
    def log_features(self) -> Sequence[str]:
        return pulumi.get(self, "log_features")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="passiveHealthEnabled")
    def passive_health_enabled(self) -> bool:
        return pulumi.get(self, "passive_health_enabled")

    @property
    @pulumi.getter(name="serverGroups")
    def server_groups(self) -> Sequence['outputs.GetZPASegmentGroupApplicationServerGroupResult']:
        return pulumi.get(self, "server_groups")

    @property
    @pulumi.getter(name="tcpPortRanges")
    def tcp_port_ranges(self) -> Sequence[str]:
        return pulumi.get(self, "tcp_port_ranges")

    @property
    @pulumi.getter(name="tcpPortsIns")
    def tcp_ports_ins(self) -> Sequence[str]:
        return pulumi.get(self, "tcp_ports_ins")

    @property
    @pulumi.getter(name="tcpPortsOuts")
    def tcp_ports_outs(self) -> Sequence[str]:
        return pulumi.get(self, "tcp_ports_outs")

    @property
    @pulumi.getter(name="udpPortRanges")
    def udp_port_ranges(self) -> Sequence[str]:
        return pulumi.get(self, "udp_port_ranges")


@pulumi.output_type
class GetZPASegmentGroupApplicationServerGroupResult(dict):
    def __init__(__self__, *,
                 config_space: str,
                 creation_time: str,
                 description: str,
                 dynamic_discovery: bool,
                 enabled: bool,
                 id: str,
                 modified_time: str,
                 modifiedby: str,
                 name: str):
        pulumi.set(__self__, "config_space", config_space)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dynamic_discovery", dynamic_discovery)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="configSpace")
    def config_space(self) -> str:
        return pulumi.get(self, "config_space")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dynamicDiscovery")
    def dynamic_discovery(self) -> bool:
        return pulumi.get(self, "dynamic_discovery")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZPAServerGroupAppConnectorGroupResult(dict):
    def __init__(__self__, *,
                 city_country: str,
                 connectors: Sequence['outputs.GetZPAServerGroupAppConnectorGroupConnectorResult'],
                 country_code: str,
                 creation_time: str,
                 description: str,
                 dns_query_type: str,
                 enabled: bool,
                 geolocation_id: str,
                 id: str,
                 latitude: str,
                 location: str,
                 longitude: str,
                 modified_time: str,
                 modifiedby: str,
                 name: str,
                 server_groups: Sequence['outputs.GetZPAServerGroupAppConnectorGroupServerGroupResult'],
                 siem_app_connector_group: bool,
                 upgrade_day: str,
                 upgrade_time_in_secs: str,
                 version_profile_id: str):
        pulumi.set(__self__, "city_country", city_country)
        pulumi.set(__self__, "connectors", connectors)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dns_query_type", dns_query_type)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "geolocation_id", geolocation_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "longitude", longitude)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "server_groups", server_groups)
        pulumi.set(__self__, "siem_app_connector_group", siem_app_connector_group)
        pulumi.set(__self__, "upgrade_day", upgrade_day)
        pulumi.set(__self__, "upgrade_time_in_secs", upgrade_time_in_secs)
        pulumi.set(__self__, "version_profile_id", version_profile_id)

    @property
    @pulumi.getter(name="cityCountry")
    def city_country(self) -> str:
        return pulumi.get(self, "city_country")

    @property
    @pulumi.getter
    def connectors(self) -> Sequence['outputs.GetZPAServerGroupAppConnectorGroupConnectorResult']:
        return pulumi.get(self, "connectors")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dnsQueryType")
    def dns_query_type(self) -> str:
        return pulumi.get(self, "dns_query_type")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="geolocationId")
    def geolocation_id(self) -> str:
        return pulumi.get(self, "geolocation_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def latitude(self) -> str:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def location(self) -> str:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def longitude(self) -> str:
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serverGroups")
    def server_groups(self) -> Sequence['outputs.GetZPAServerGroupAppConnectorGroupServerGroupResult']:
        return pulumi.get(self, "server_groups")

    @property
    @pulumi.getter(name="siemAppConnectorGroup")
    def siem_app_connector_group(self) -> bool:
        return pulumi.get(self, "siem_app_connector_group")

    @property
    @pulumi.getter(name="upgradeDay")
    def upgrade_day(self) -> str:
        return pulumi.get(self, "upgrade_day")

    @property
    @pulumi.getter(name="upgradeTimeInSecs")
    def upgrade_time_in_secs(self) -> str:
        return pulumi.get(self, "upgrade_time_in_secs")

    @property
    @pulumi.getter(name="versionProfileId")
    def version_profile_id(self) -> str:
        return pulumi.get(self, "version_profile_id")


@pulumi.output_type
class GetZPAServerGroupAppConnectorGroupConnectorResult(dict):
    def __init__(__self__, *,
                 creation_time: str,
                 description: str,
                 enabled: bool,
                 fingerprint: str,
                 id: str,
                 issued_cert_id: str,
                 modified_time: str,
                 modifiedby: str,
                 upgrade_attempt: str,
                 name: Optional[str] = None):
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "fingerprint", fingerprint)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "issued_cert_id", issued_cert_id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "upgrade_attempt", upgrade_attempt)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def fingerprint(self) -> str:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="issuedCertId")
    def issued_cert_id(self) -> str:
        return pulumi.get(self, "issued_cert_id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter(name="upgradeAttempt")
    def upgrade_attempt(self) -> str:
        return pulumi.get(self, "upgrade_attempt")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZPAServerGroupAppConnectorGroupServerGroupResult(dict):
    def __init__(__self__, *,
                 config_space: str,
                 creation_time: str,
                 description: str,
                 dynamic_discovery: bool,
                 enabled: bool,
                 id: str,
                 modified_time: str,
                 modifiedby: str,
                 name: Optional[str] = None):
        pulumi.set(__self__, "config_space", config_space)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dynamic_discovery", dynamic_discovery)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="configSpace")
    def config_space(self) -> str:
        return pulumi.get(self, "config_space")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dynamicDiscovery")
    def dynamic_discovery(self) -> bool:
        return pulumi.get(self, "dynamic_discovery")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZPAServerGroupApplicationResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZPAServerGroupServerResult(dict):
    def __init__(__self__, *,
                 address: str,
                 app_server_group_ids: Sequence[str],
                 config_space: str,
                 creation_time: str,
                 description: str,
                 enabled: bool,
                 id: str,
                 modified_time: str,
                 modifiedby: str,
                 name: str):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "app_server_group_ids", app_server_group_ids)
        pulumi.set(__self__, "config_space", config_space)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="appServerGroupIds")
    def app_server_group_ids(self) -> Sequence[str]:
        return pulumi.get(self, "app_server_group_ids")

    @property
    @pulumi.getter(name="configSpace")
    def config_space(self) -> str:
        return pulumi.get(self, "config_space")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZPAServiceEdgeGroupServiceEdgeResult(dict):
    def __init__(__self__, *,
                 application_start_time: str,
                 control_channel_status: str,
                 creation_time: str,
                 ctrl_broker_name: str,
                 current_version: str,
                 description: str,
                 enabled: bool,
                 enrollment_cert: Mapping[str, Any],
                 expected_upgrade_time: str,
                 expected_version: str,
                 fingerprint: str,
                 id: str,
                 ipacl: str,
                 issued_cert_id: str,
                 last_broker_connect_time: str,
                 last_broker_connect_time_duration: str,
                 last_broker_disconnect_time: str,
                 last_broker_disconnect_time_duration: str,
                 last_upgrade_time: str,
                 latitude: str,
                 listen_ips: str,
                 location: str,
                 longitude: str,
                 modified_time: str,
                 modifiedby: str,
                 name: str,
                 platform: str,
                 previous_version: str,
                 private_ip: str,
                 provisioning_key_id: str,
                 provisioning_key_name: str,
                 public_ip: str,
                 publish_ips: str,
                 sarge_version: str,
                 service_edge_group_id: str,
                 service_edge_group_name: str,
                 upgrade_attempt: str,
                 upgrade_status: str):
        pulumi.set(__self__, "application_start_time", application_start_time)
        pulumi.set(__self__, "control_channel_status", control_channel_status)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "ctrl_broker_name", ctrl_broker_name)
        pulumi.set(__self__, "current_version", current_version)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "enrollment_cert", enrollment_cert)
        pulumi.set(__self__, "expected_upgrade_time", expected_upgrade_time)
        pulumi.set(__self__, "expected_version", expected_version)
        pulumi.set(__self__, "fingerprint", fingerprint)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ipacl", ipacl)
        pulumi.set(__self__, "issued_cert_id", issued_cert_id)
        pulumi.set(__self__, "last_broker_connect_time", last_broker_connect_time)
        pulumi.set(__self__, "last_broker_connect_time_duration", last_broker_connect_time_duration)
        pulumi.set(__self__, "last_broker_disconnect_time", last_broker_disconnect_time)
        pulumi.set(__self__, "last_broker_disconnect_time_duration", last_broker_disconnect_time_duration)
        pulumi.set(__self__, "last_upgrade_time", last_upgrade_time)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "listen_ips", listen_ips)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "longitude", longitude)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "previous_version", previous_version)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "provisioning_key_id", provisioning_key_id)
        pulumi.set(__self__, "provisioning_key_name", provisioning_key_name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "publish_ips", publish_ips)
        pulumi.set(__self__, "sarge_version", sarge_version)
        pulumi.set(__self__, "service_edge_group_id", service_edge_group_id)
        pulumi.set(__self__, "service_edge_group_name", service_edge_group_name)
        pulumi.set(__self__, "upgrade_attempt", upgrade_attempt)
        pulumi.set(__self__, "upgrade_status", upgrade_status)

    @property
    @pulumi.getter(name="applicationStartTime")
    def application_start_time(self) -> str:
        return pulumi.get(self, "application_start_time")

    @property
    @pulumi.getter(name="controlChannelStatus")
    def control_channel_status(self) -> str:
        return pulumi.get(self, "control_channel_status")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="ctrlBrokerName")
    def ctrl_broker_name(self) -> str:
        return pulumi.get(self, "ctrl_broker_name")

    @property
    @pulumi.getter(name="currentVersion")
    def current_version(self) -> str:
        return pulumi.get(self, "current_version")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="enrollmentCert")
    def enrollment_cert(self) -> Mapping[str, Any]:
        return pulumi.get(self, "enrollment_cert")

    @property
    @pulumi.getter(name="expectedUpgradeTime")
    def expected_upgrade_time(self) -> str:
        return pulumi.get(self, "expected_upgrade_time")

    @property
    @pulumi.getter(name="expectedVersion")
    def expected_version(self) -> str:
        return pulumi.get(self, "expected_version")

    @property
    @pulumi.getter
    def fingerprint(self) -> str:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ipacl(self) -> str:
        return pulumi.get(self, "ipacl")

    @property
    @pulumi.getter(name="issuedCertId")
    def issued_cert_id(self) -> str:
        return pulumi.get(self, "issued_cert_id")

    @property
    @pulumi.getter(name="lastBrokerConnectTime")
    def last_broker_connect_time(self) -> str:
        return pulumi.get(self, "last_broker_connect_time")

    @property
    @pulumi.getter(name="lastBrokerConnectTimeDuration")
    def last_broker_connect_time_duration(self) -> str:
        return pulumi.get(self, "last_broker_connect_time_duration")

    @property
    @pulumi.getter(name="lastBrokerDisconnectTime")
    def last_broker_disconnect_time(self) -> str:
        return pulumi.get(self, "last_broker_disconnect_time")

    @property
    @pulumi.getter(name="lastBrokerDisconnectTimeDuration")
    def last_broker_disconnect_time_duration(self) -> str:
        return pulumi.get(self, "last_broker_disconnect_time_duration")

    @property
    @pulumi.getter(name="lastUpgradeTime")
    def last_upgrade_time(self) -> str:
        return pulumi.get(self, "last_upgrade_time")

    @property
    @pulumi.getter
    def latitude(self) -> str:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter(name="listenIps")
    def listen_ips(self) -> str:
        return pulumi.get(self, "listen_ips")

    @property
    @pulumi.getter
    def location(self) -> str:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def longitude(self) -> str:
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def platform(self) -> str:
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="previousVersion")
    def previous_version(self) -> str:
        return pulumi.get(self, "previous_version")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="provisioningKeyId")
    def provisioning_key_id(self) -> str:
        return pulumi.get(self, "provisioning_key_id")

    @property
    @pulumi.getter(name="provisioningKeyName")
    def provisioning_key_name(self) -> str:
        return pulumi.get(self, "provisioning_key_name")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="publishIps")
    def publish_ips(self) -> str:
        return pulumi.get(self, "publish_ips")

    @property
    @pulumi.getter(name="sargeVersion")
    def sarge_version(self) -> str:
        return pulumi.get(self, "sarge_version")

    @property
    @pulumi.getter(name="serviceEdgeGroupId")
    def service_edge_group_id(self) -> str:
        return pulumi.get(self, "service_edge_group_id")

    @property
    @pulumi.getter(name="serviceEdgeGroupName")
    def service_edge_group_name(self) -> str:
        return pulumi.get(self, "service_edge_group_name")

    @property
    @pulumi.getter(name="upgradeAttempt")
    def upgrade_attempt(self) -> str:
        return pulumi.get(self, "upgrade_attempt")

    @property
    @pulumi.getter(name="upgradeStatus")
    def upgrade_status(self) -> str:
        return pulumi.get(self, "upgrade_status")


@pulumi.output_type
class GetZPAServiceEdgeGroupTrustedNetworkResult(dict):
    def __init__(__self__, *,
                 creation_time: str,
                 domain: str,
                 id: str,
                 master_customer_id: str,
                 modified_time: str,
                 modifiedby: str,
                 name: str,
                 network_id: str,
                 zscaler_cloud: str):
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "master_customer_id", master_customer_id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "modifiedby", modifiedby)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "zscaler_cloud", zscaler_cloud)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="masterCustomerId")
    def master_customer_id(self) -> str:
        return pulumi.get(self, "master_customer_id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def modifiedby(self) -> str:
        return pulumi.get(self, "modifiedby")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="zscalerCloud")
    def zscaler_cloud(self) -> str:
        return pulumi.get(self, "zscaler_cloud")


