# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ZPAAppSegmentBrowserAccessArgs', 'ZPAAppSegmentBrowserAccess']

@pulumi.input_type
class ZPAAppSegmentBrowserAccessArgs:
    def __init__(__self__, *,
                 segment_group_id: pulumi.Input[str],
                 server_groups: pulumi.Input[Sequence[pulumi.Input['ZPAAppSegmentBrowserAccessServerGroupArgs']]],
                 bypass_type: Optional[pulumi.Input[str]] = None,
                 clientless_apps: Optional[pulumi.Input[Sequence[pulumi.Input['ZPAAppSegmentBrowserAccessClientlessAppArgs']]]] = None,
                 config_space: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 double_encrypt: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 health_check_type: Optional[pulumi.Input[str]] = None,
                 health_reporting: Optional[pulumi.Input[str]] = None,
                 ip_anchored: Optional[pulumi.Input[bool]] = None,
                 is_cname_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passive_health_enabled: Optional[pulumi.Input[bool]] = None,
                 segment_group_name: Optional[pulumi.Input[str]] = None,
                 tcp_port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 udp_port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a ZPAAppSegmentBrowserAccess resource.
        :param pulumi.Input[Sequence[pulumi.Input['ZPAAppSegmentBrowserAccessServerGroupArgs']]] server_groups: List of the server group IDs.
        :param pulumi.Input[str] bypass_type: Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
               The value NEVER indicates the use of the client forwarding policy.
        :param pulumi.Input[str] description: Description of the application.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domain_names: List of domains and IPs.
        :param pulumi.Input[bool] double_encrypt: Whether Double Encryption is enabled or disabled for the app.
        :param pulumi.Input[str] health_reporting: Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
        :param pulumi.Input[bool] is_cname_enabled: Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
               connectors.
        :param pulumi.Input[str] name: Name of the application.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tcp_port_ranges: TCP port ranges used to access the app.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] udp_port_ranges: UDP port ranges used to access the app.
        """
        pulumi.set(__self__, "segment_group_id", segment_group_id)
        pulumi.set(__self__, "server_groups", server_groups)
        if bypass_type is not None:
            pulumi.set(__self__, "bypass_type", bypass_type)
        if clientless_apps is not None:
            pulumi.set(__self__, "clientless_apps", clientless_apps)
        if config_space is not None:
            pulumi.set(__self__, "config_space", config_space)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_names is not None:
            pulumi.set(__self__, "domain_names", domain_names)
        if double_encrypt is not None:
            pulumi.set(__self__, "double_encrypt", double_encrypt)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if health_check_type is not None:
            pulumi.set(__self__, "health_check_type", health_check_type)
        if health_reporting is not None:
            pulumi.set(__self__, "health_reporting", health_reporting)
        if ip_anchored is not None:
            pulumi.set(__self__, "ip_anchored", ip_anchored)
        if is_cname_enabled is not None:
            pulumi.set(__self__, "is_cname_enabled", is_cname_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if passive_health_enabled is not None:
            pulumi.set(__self__, "passive_health_enabled", passive_health_enabled)
        if segment_group_name is not None:
            pulumi.set(__self__, "segment_group_name", segment_group_name)
        if tcp_port_ranges is not None:
            pulumi.set(__self__, "tcp_port_ranges", tcp_port_ranges)
        if udp_port_ranges is not None:
            pulumi.set(__self__, "udp_port_ranges", udp_port_ranges)

    @property
    @pulumi.getter(name="segmentGroupId")
    def segment_group_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "segment_group_id")

    @segment_group_id.setter
    def segment_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "segment_group_id", value)

    @property
    @pulumi.getter(name="serverGroups")
    def server_groups(self) -> pulumi.Input[Sequence[pulumi.Input['ZPAAppSegmentBrowserAccessServerGroupArgs']]]:
        """
        List of the server group IDs.
        """
        return pulumi.get(self, "server_groups")

    @server_groups.setter
    def server_groups(self, value: pulumi.Input[Sequence[pulumi.Input['ZPAAppSegmentBrowserAccessServerGroupArgs']]]):
        pulumi.set(self, "server_groups", value)

    @property
    @pulumi.getter(name="bypassType")
    def bypass_type(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
        The value NEVER indicates the use of the client forwarding policy.
        """
        return pulumi.get(self, "bypass_type")

    @bypass_type.setter
    def bypass_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bypass_type", value)

    @property
    @pulumi.getter(name="clientlessApps")
    def clientless_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZPAAppSegmentBrowserAccessClientlessAppArgs']]]]:
        return pulumi.get(self, "clientless_apps")

    @clientless_apps.setter
    def clientless_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZPAAppSegmentBrowserAccessClientlessAppArgs']]]]):
        pulumi.set(self, "clientless_apps", value)

    @property
    @pulumi.getter(name="configSpace")
    def config_space(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "config_space")

    @config_space.setter
    def config_space(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_space", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the application.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="domainNames")
    def domain_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of domains and IPs.
        """
        return pulumi.get(self, "domain_names")

    @domain_names.setter
    def domain_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "domain_names", value)

    @property
    @pulumi.getter(name="doubleEncrypt")
    def double_encrypt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether Double Encryption is enabled or disabled for the app.
        """
        return pulumi.get(self, "double_encrypt")

    @double_encrypt.setter
    def double_encrypt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "double_encrypt", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "health_check_type")

    @health_check_type.setter
    def health_check_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_type", value)

    @property
    @pulumi.getter(name="healthReporting")
    def health_reporting(self) -> Optional[pulumi.Input[str]]:
        """
        Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
        """
        return pulumi.get(self, "health_reporting")

    @health_reporting.setter
    def health_reporting(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_reporting", value)

    @property
    @pulumi.getter(name="ipAnchored")
    def ip_anchored(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ip_anchored")

    @ip_anchored.setter
    def ip_anchored(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_anchored", value)

    @property
    @pulumi.getter(name="isCnameEnabled")
    def is_cname_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
        connectors.
        """
        return pulumi.get(self, "is_cname_enabled")

    @is_cname_enabled.setter
    def is_cname_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_cname_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the application.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="passiveHealthEnabled")
    def passive_health_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "passive_health_enabled")

    @passive_health_enabled.setter
    def passive_health_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "passive_health_enabled", value)

    @property
    @pulumi.getter(name="segmentGroupName")
    def segment_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "segment_group_name")

    @segment_group_name.setter
    def segment_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "segment_group_name", value)

    @property
    @pulumi.getter(name="tcpPortRanges")
    def tcp_port_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        TCP port ranges used to access the app.
        """
        return pulumi.get(self, "tcp_port_ranges")

    @tcp_port_ranges.setter
    def tcp_port_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tcp_port_ranges", value)

    @property
    @pulumi.getter(name="udpPortRanges")
    def udp_port_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        UDP port ranges used to access the app.
        """
        return pulumi.get(self, "udp_port_ranges")

    @udp_port_ranges.setter
    def udp_port_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "udp_port_ranges", value)


@pulumi.input_type
class _ZPAAppSegmentBrowserAccessState:
    def __init__(__self__, *,
                 bypass_type: Optional[pulumi.Input[str]] = None,
                 clientless_apps: Optional[pulumi.Input[Sequence[pulumi.Input['ZPAAppSegmentBrowserAccessClientlessAppArgs']]]] = None,
                 config_space: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 double_encrypt: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 health_check_type: Optional[pulumi.Input[str]] = None,
                 health_reporting: Optional[pulumi.Input[str]] = None,
                 ip_anchored: Optional[pulumi.Input[bool]] = None,
                 is_cname_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passive_health_enabled: Optional[pulumi.Input[bool]] = None,
                 segment_group_id: Optional[pulumi.Input[str]] = None,
                 segment_group_name: Optional[pulumi.Input[str]] = None,
                 server_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ZPAAppSegmentBrowserAccessServerGroupArgs']]]] = None,
                 tcp_port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 udp_port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering ZPAAppSegmentBrowserAccess resources.
        :param pulumi.Input[str] bypass_type: Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
               The value NEVER indicates the use of the client forwarding policy.
        :param pulumi.Input[str] description: Description of the application.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domain_names: List of domains and IPs.
        :param pulumi.Input[bool] double_encrypt: Whether Double Encryption is enabled or disabled for the app.
        :param pulumi.Input[str] health_reporting: Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
        :param pulumi.Input[bool] is_cname_enabled: Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
               connectors.
        :param pulumi.Input[str] name: Name of the application.
        :param pulumi.Input[Sequence[pulumi.Input['ZPAAppSegmentBrowserAccessServerGroupArgs']]] server_groups: List of the server group IDs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tcp_port_ranges: TCP port ranges used to access the app.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] udp_port_ranges: UDP port ranges used to access the app.
        """
        if bypass_type is not None:
            pulumi.set(__self__, "bypass_type", bypass_type)
        if clientless_apps is not None:
            pulumi.set(__self__, "clientless_apps", clientless_apps)
        if config_space is not None:
            pulumi.set(__self__, "config_space", config_space)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_names is not None:
            pulumi.set(__self__, "domain_names", domain_names)
        if double_encrypt is not None:
            pulumi.set(__self__, "double_encrypt", double_encrypt)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if health_check_type is not None:
            pulumi.set(__self__, "health_check_type", health_check_type)
        if health_reporting is not None:
            pulumi.set(__self__, "health_reporting", health_reporting)
        if ip_anchored is not None:
            pulumi.set(__self__, "ip_anchored", ip_anchored)
        if is_cname_enabled is not None:
            pulumi.set(__self__, "is_cname_enabled", is_cname_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if passive_health_enabled is not None:
            pulumi.set(__self__, "passive_health_enabled", passive_health_enabled)
        if segment_group_id is not None:
            pulumi.set(__self__, "segment_group_id", segment_group_id)
        if segment_group_name is not None:
            pulumi.set(__self__, "segment_group_name", segment_group_name)
        if server_groups is not None:
            pulumi.set(__self__, "server_groups", server_groups)
        if tcp_port_ranges is not None:
            pulumi.set(__self__, "tcp_port_ranges", tcp_port_ranges)
        if udp_port_ranges is not None:
            pulumi.set(__self__, "udp_port_ranges", udp_port_ranges)

    @property
    @pulumi.getter(name="bypassType")
    def bypass_type(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
        The value NEVER indicates the use of the client forwarding policy.
        """
        return pulumi.get(self, "bypass_type")

    @bypass_type.setter
    def bypass_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bypass_type", value)

    @property
    @pulumi.getter(name="clientlessApps")
    def clientless_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZPAAppSegmentBrowserAccessClientlessAppArgs']]]]:
        return pulumi.get(self, "clientless_apps")

    @clientless_apps.setter
    def clientless_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZPAAppSegmentBrowserAccessClientlessAppArgs']]]]):
        pulumi.set(self, "clientless_apps", value)

    @property
    @pulumi.getter(name="configSpace")
    def config_space(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "config_space")

    @config_space.setter
    def config_space(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_space", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the application.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="domainNames")
    def domain_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of domains and IPs.
        """
        return pulumi.get(self, "domain_names")

    @domain_names.setter
    def domain_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "domain_names", value)

    @property
    @pulumi.getter(name="doubleEncrypt")
    def double_encrypt(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether Double Encryption is enabled or disabled for the app.
        """
        return pulumi.get(self, "double_encrypt")

    @double_encrypt.setter
    def double_encrypt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "double_encrypt", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "health_check_type")

    @health_check_type.setter
    def health_check_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_type", value)

    @property
    @pulumi.getter(name="healthReporting")
    def health_reporting(self) -> Optional[pulumi.Input[str]]:
        """
        Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
        """
        return pulumi.get(self, "health_reporting")

    @health_reporting.setter
    def health_reporting(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_reporting", value)

    @property
    @pulumi.getter(name="ipAnchored")
    def ip_anchored(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ip_anchored")

    @ip_anchored.setter
    def ip_anchored(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_anchored", value)

    @property
    @pulumi.getter(name="isCnameEnabled")
    def is_cname_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
        connectors.
        """
        return pulumi.get(self, "is_cname_enabled")

    @is_cname_enabled.setter
    def is_cname_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_cname_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the application.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="passiveHealthEnabled")
    def passive_health_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "passive_health_enabled")

    @passive_health_enabled.setter
    def passive_health_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "passive_health_enabled", value)

    @property
    @pulumi.getter(name="segmentGroupId")
    def segment_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "segment_group_id")

    @segment_group_id.setter
    def segment_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "segment_group_id", value)

    @property
    @pulumi.getter(name="segmentGroupName")
    def segment_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "segment_group_name")

    @segment_group_name.setter
    def segment_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "segment_group_name", value)

    @property
    @pulumi.getter(name="serverGroups")
    def server_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZPAAppSegmentBrowserAccessServerGroupArgs']]]]:
        """
        List of the server group IDs.
        """
        return pulumi.get(self, "server_groups")

    @server_groups.setter
    def server_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZPAAppSegmentBrowserAccessServerGroupArgs']]]]):
        pulumi.set(self, "server_groups", value)

    @property
    @pulumi.getter(name="tcpPortRanges")
    def tcp_port_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        TCP port ranges used to access the app.
        """
        return pulumi.get(self, "tcp_port_ranges")

    @tcp_port_ranges.setter
    def tcp_port_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tcp_port_ranges", value)

    @property
    @pulumi.getter(name="udpPortRanges")
    def udp_port_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        UDP port ranges used to access the app.
        """
        return pulumi.get(self, "udp_port_ranges")

    @udp_port_ranges.setter
    def udp_port_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "udp_port_ranges", value)


class ZPAAppSegmentBrowserAccess(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bypass_type: Optional[pulumi.Input[str]] = None,
                 clientless_apps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZPAAppSegmentBrowserAccessClientlessAppArgs']]]]] = None,
                 config_space: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 double_encrypt: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 health_check_type: Optional[pulumi.Input[str]] = None,
                 health_reporting: Optional[pulumi.Input[str]] = None,
                 ip_anchored: Optional[pulumi.Input[bool]] = None,
                 is_cname_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passive_health_enabled: Optional[pulumi.Input[bool]] = None,
                 segment_group_id: Optional[pulumi.Input[str]] = None,
                 segment_group_name: Optional[pulumi.Input[str]] = None,
                 server_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZPAAppSegmentBrowserAccessServerGroupArgs']]]]] = None,
                 tcp_port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 udp_port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a ZPAAppSegmentBrowserAccess resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bypass_type: Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
               The value NEVER indicates the use of the client forwarding policy.
        :param pulumi.Input[str] description: Description of the application.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domain_names: List of domains and IPs.
        :param pulumi.Input[bool] double_encrypt: Whether Double Encryption is enabled or disabled for the app.
        :param pulumi.Input[str] health_reporting: Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
        :param pulumi.Input[bool] is_cname_enabled: Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
               connectors.
        :param pulumi.Input[str] name: Name of the application.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZPAAppSegmentBrowserAccessServerGroupArgs']]]] server_groups: List of the server group IDs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tcp_port_ranges: TCP port ranges used to access the app.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] udp_port_ranges: UDP port ranges used to access the app.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ZPAAppSegmentBrowserAccessArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ZPAAppSegmentBrowserAccess resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ZPAAppSegmentBrowserAccessArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ZPAAppSegmentBrowserAccessArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bypass_type: Optional[pulumi.Input[str]] = None,
                 clientless_apps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZPAAppSegmentBrowserAccessClientlessAppArgs']]]]] = None,
                 config_space: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 double_encrypt: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 health_check_type: Optional[pulumi.Input[str]] = None,
                 health_reporting: Optional[pulumi.Input[str]] = None,
                 ip_anchored: Optional[pulumi.Input[bool]] = None,
                 is_cname_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passive_health_enabled: Optional[pulumi.Input[bool]] = None,
                 segment_group_id: Optional[pulumi.Input[str]] = None,
                 segment_group_name: Optional[pulumi.Input[str]] = None,
                 server_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZPAAppSegmentBrowserAccessServerGroupArgs']]]]] = None,
                 tcp_port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 udp_port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ZPAAppSegmentBrowserAccessArgs.__new__(ZPAAppSegmentBrowserAccessArgs)

            __props__.__dict__["bypass_type"] = bypass_type
            __props__.__dict__["clientless_apps"] = clientless_apps
            __props__.__dict__["config_space"] = config_space
            __props__.__dict__["description"] = description
            __props__.__dict__["domain_names"] = domain_names
            __props__.__dict__["double_encrypt"] = double_encrypt
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["health_check_type"] = health_check_type
            __props__.__dict__["health_reporting"] = health_reporting
            __props__.__dict__["ip_anchored"] = ip_anchored
            __props__.__dict__["is_cname_enabled"] = is_cname_enabled
            __props__.__dict__["name"] = name
            __props__.__dict__["passive_health_enabled"] = passive_health_enabled
            if segment_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'segment_group_id'")
            __props__.__dict__["segment_group_id"] = segment_group_id
            __props__.__dict__["segment_group_name"] = segment_group_name
            if server_groups is None and not opts.urn:
                raise TypeError("Missing required property 'server_groups'")
            __props__.__dict__["server_groups"] = server_groups
            __props__.__dict__["tcp_port_ranges"] = tcp_port_ranges
            __props__.__dict__["udp_port_ranges"] = udp_port_ranges
        super(ZPAAppSegmentBrowserAccess, __self__).__init__(
            'zpa:index/zPAAppSegmentBrowserAccess:ZPAAppSegmentBrowserAccess',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bypass_type: Optional[pulumi.Input[str]] = None,
            clientless_apps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZPAAppSegmentBrowserAccessClientlessAppArgs']]]]] = None,
            config_space: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            domain_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            double_encrypt: Optional[pulumi.Input[bool]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            health_check_type: Optional[pulumi.Input[str]] = None,
            health_reporting: Optional[pulumi.Input[str]] = None,
            ip_anchored: Optional[pulumi.Input[bool]] = None,
            is_cname_enabled: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            passive_health_enabled: Optional[pulumi.Input[bool]] = None,
            segment_group_id: Optional[pulumi.Input[str]] = None,
            segment_group_name: Optional[pulumi.Input[str]] = None,
            server_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZPAAppSegmentBrowserAccessServerGroupArgs']]]]] = None,
            tcp_port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            udp_port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'ZPAAppSegmentBrowserAccess':
        """
        Get an existing ZPAAppSegmentBrowserAccess resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bypass_type: Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
               The value NEVER indicates the use of the client forwarding policy.
        :param pulumi.Input[str] description: Description of the application.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domain_names: List of domains and IPs.
        :param pulumi.Input[bool] double_encrypt: Whether Double Encryption is enabled or disabled for the app.
        :param pulumi.Input[str] health_reporting: Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
        :param pulumi.Input[bool] is_cname_enabled: Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
               connectors.
        :param pulumi.Input[str] name: Name of the application.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZPAAppSegmentBrowserAccessServerGroupArgs']]]] server_groups: List of the server group IDs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tcp_port_ranges: TCP port ranges used to access the app.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] udp_port_ranges: UDP port ranges used to access the app.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ZPAAppSegmentBrowserAccessState.__new__(_ZPAAppSegmentBrowserAccessState)

        __props__.__dict__["bypass_type"] = bypass_type
        __props__.__dict__["clientless_apps"] = clientless_apps
        __props__.__dict__["config_space"] = config_space
        __props__.__dict__["description"] = description
        __props__.__dict__["domain_names"] = domain_names
        __props__.__dict__["double_encrypt"] = double_encrypt
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["health_check_type"] = health_check_type
        __props__.__dict__["health_reporting"] = health_reporting
        __props__.__dict__["ip_anchored"] = ip_anchored
        __props__.__dict__["is_cname_enabled"] = is_cname_enabled
        __props__.__dict__["name"] = name
        __props__.__dict__["passive_health_enabled"] = passive_health_enabled
        __props__.__dict__["segment_group_id"] = segment_group_id
        __props__.__dict__["segment_group_name"] = segment_group_name
        __props__.__dict__["server_groups"] = server_groups
        __props__.__dict__["tcp_port_ranges"] = tcp_port_ranges
        __props__.__dict__["udp_port_ranges"] = udp_port_ranges
        return ZPAAppSegmentBrowserAccess(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bypassType")
    def bypass_type(self) -> pulumi.Output[Optional[str]]:
        """
        Indicates whether users can bypass ZPA to access applications. Default: NEVER. Supported values: ALWAYS, NEVER, ON_NET.
        The value NEVER indicates the use of the client forwarding policy.
        """
        return pulumi.get(self, "bypass_type")

    @property
    @pulumi.getter(name="clientlessApps")
    def clientless_apps(self) -> pulumi.Output[Optional[Sequence['outputs.ZPAAppSegmentBrowserAccessClientlessApp']]]:
        return pulumi.get(self, "clientless_apps")

    @property
    @pulumi.getter(name="configSpace")
    def config_space(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "config_space")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the application.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainNames")
    def domain_names(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of domains and IPs.
        """
        return pulumi.get(self, "domain_names")

    @property
    @pulumi.getter(name="doubleEncrypt")
    def double_encrypt(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether Double Encryption is enabled or disabled for the app.
        """
        return pulumi.get(self, "double_encrypt")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "health_check_type")

    @property
    @pulumi.getter(name="healthReporting")
    def health_reporting(self) -> pulumi.Output[str]:
        """
        Whether health reporting for the app is Continuous or On Access. Supported values: NONE, ON_ACCESS, CONTINUOUS.
        """
        return pulumi.get(self, "health_reporting")

    @property
    @pulumi.getter(name="ipAnchored")
    def ip_anchored(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "ip_anchored")

    @property
    @pulumi.getter(name="isCnameEnabled")
    def is_cname_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if the Zscaler Client Connector (formerly Zscaler App or Z App) receives CNAME DNS records from the
        connectors.
        """
        return pulumi.get(self, "is_cname_enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the application.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="passiveHealthEnabled")
    def passive_health_enabled(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "passive_health_enabled")

    @property
    @pulumi.getter(name="segmentGroupId")
    def segment_group_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "segment_group_id")

    @property
    @pulumi.getter(name="segmentGroupName")
    def segment_group_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "segment_group_name")

    @property
    @pulumi.getter(name="serverGroups")
    def server_groups(self) -> pulumi.Output[Sequence['outputs.ZPAAppSegmentBrowserAccessServerGroup']]:
        """
        List of the server group IDs.
        """
        return pulumi.get(self, "server_groups")

    @property
    @pulumi.getter(name="tcpPortRanges")
    def tcp_port_ranges(self) -> pulumi.Output[Sequence[str]]:
        """
        TCP port ranges used to access the app.
        """
        return pulumi.get(self, "tcp_port_ranges")

    @property
    @pulumi.getter(name="udpPortRanges")
    def udp_port_ranges(self) -> pulumi.Output[Sequence[str]]:
        """
        UDP port ranges used to access the app.
        """
        return pulumi.get(self, "udp_port_ranges")

